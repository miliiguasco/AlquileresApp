// <auto-generated />
using System;
using AlquileresApp.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace AlquileresApp.Data.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250526152230_Localidad")]
    partial class Localidad
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.5");

            modelBuilder.Entity("AlquileresApp.Core.Entidades.Imagen", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("PropiedadId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("PropiedadId");

                    b.ToTable("Imagenes");
                });

            modelBuilder.Entity("AlquileresApp.Core.Entidades.Propiedad", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("Capacidad")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Direccion")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("EncargadoId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Localidad")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("PagoAnticipado")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("PrecioPorNoche")
                        .HasColumnType("TEXT");

                    b.PrimitiveCollection<string>("ServiciosDisponibles")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Titulo")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Propiedades");
                });

            modelBuilder.Entity("AlquileresApp.Core.Entidades.Reserva", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("ClienteId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("FechaFin")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("FechaInicio")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("PrecioTotal")
                        .HasColumnType("TEXT");

                    b.Property<int>("PropiedadId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("ClienteId");

                    b.HasIndex("PropiedadId");

                    b.ToTable("Reservas");
                });

            modelBuilder.Entity("AlquileresApp.Core.Entidades.Tarjeta", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("CVV")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("FechaVencimiento")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("NumeroTarjeta")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("ReservaId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Titular")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ReservaId")
                        .IsUnique();

                    b.ToTable("Tarjetas");
                });

            modelBuilder.Entity("AlquileresApp.Core.Entidades.Usuario", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Apellido")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Contraseña")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("FechaNacimiento")
                        .HasColumnType("TEXT");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Rol")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Telefono")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("Usuarios");

                    b.HasDiscriminator<int>("Rol");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("AlquileresApp.Core.Entidades.Administrador", b =>
                {
                    b.HasBaseType("AlquileresApp.Core.Entidades.Usuario");

                    b.HasDiscriminator().HasValue(1);
                });

            modelBuilder.Entity("AlquileresApp.Core.Entidades.Cliente", b =>
                {
                    b.HasBaseType("AlquileresApp.Core.Entidades.Usuario");

                    b.HasDiscriminator().HasValue(3);
                });

            modelBuilder.Entity("AlquileresApp.Core.Entidades.Encargado", b =>
                {
                    b.HasBaseType("AlquileresApp.Core.Entidades.Usuario");

                    b.HasDiscriminator().HasValue(2);
                });

            modelBuilder.Entity("AlquileresApp.Core.Entidades.Imagen", b =>
                {
                    b.HasOne("AlquileresApp.Core.Entidades.Propiedad", "Propiedad")
                        .WithMany("Imagenes")
                        .HasForeignKey("PropiedadId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Propiedad");
                });

            modelBuilder.Entity("AlquileresApp.Core.Entidades.Reserva", b =>
                {
                    b.HasOne("AlquileresApp.Core.Entidades.Cliente", "Usuario")
                        .WithMany("Reservas")
                        .HasForeignKey("ClienteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AlquileresApp.Core.Entidades.Propiedad", "Propiedad")
                        .WithMany()
                        .HasForeignKey("PropiedadId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Propiedad");

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("AlquileresApp.Core.Entidades.Tarjeta", b =>
                {
                    b.HasOne("AlquileresApp.Core.Entidades.Reserva", "Reserva")
                        .WithOne("Tarjeta")
                        .HasForeignKey("AlquileresApp.Core.Entidades.Tarjeta", "ReservaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Reserva");
                });

            modelBuilder.Entity("AlquileresApp.Core.Entidades.Propiedad", b =>
                {
                    b.Navigation("Imagenes");
                });

            modelBuilder.Entity("AlquileresApp.Core.Entidades.Reserva", b =>
                {
                    b.Navigation("Tarjeta");
                });

            modelBuilder.Entity("AlquileresApp.Core.Entidades.Cliente", b =>
                {
                    b.Navigation("Reservas");
                });
#pragma warning restore 612, 618
        }
    }
}
