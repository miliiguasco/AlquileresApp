// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using alquileresapp.data;

#nullable disable

namespace AlquileresApp.Data.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250516174928_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.5");

            modelBuilder.Entity("alquileresapp.core.Entidades.Imagen", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("PropiedadId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("PropiedadId");

                    b.ToTable("Imagenes");
                });

            modelBuilder.Entity("alquileresapp.core.Entidades.Persona", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Apellido")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(21)
                        .HasColumnType("TEXT");

                    b.Property<string>("Dni")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Telefono")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Personas");

                    b.HasDiscriminator().HasValue("Persona");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("alquileresapp.core.Entidades.Propiedad", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Direccion")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("EncargadoId")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("PrecioPorNoche")
                        .HasColumnType("TEXT");

                    b.Property<string>("ServiciosDisponibles")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("EncargadoId");

                    b.ToTable("Propiedades");
                });

            modelBuilder.Entity("alquileresapp.core.Entidades.Reserva", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("FechaFin")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("FechaInicio")
                        .HasColumnType("TEXT");

                    b.Property<int>("PropiedadId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("UsuarioRegistradoId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("PropiedadId");

                    b.HasIndex("UsuarioRegistradoId");

                    b.ToTable("Reservas");
                });

            modelBuilder.Entity("alquileresapp.core.Entidades.Tarjeta", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Cvv")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("FechaVencimiento")
                        .HasColumnType("TEXT");

                    b.Property<string>("Numero")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("ReservaId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Titular")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ReservaId")
                        .IsUnique();

                    b.ToTable("Tarjetas");
                });

            modelBuilder.Entity("alquileresapp.core.Entidades.Trabajador", b =>
                {
                    b.HasBaseType("alquileresapp.core.Entidades.Persona");

                    b.Property<DateTime>("FechaAlta")
                        .HasColumnType("TEXT");

                    b.HasDiscriminator().HasValue("Trabajador");
                });

            modelBuilder.Entity("alquileresapp.core.Entidades.Usuario", b =>
                {
                    b.HasBaseType("alquileresapp.core.Entidades.Persona");

                    b.Property<string>("Contraseña")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("UsuarioNombre")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasDiscriminator().HasValue("Usuario");
                });

            modelBuilder.Entity("alquileresapp.core.Entidades.UsuarioNoRegistrado", b =>
                {
                    b.HasBaseType("alquileresapp.core.Entidades.Persona");

                    b.HasDiscriminator().HasValue("UsuarioNoRegistrado");
                });

            modelBuilder.Entity("alquileresapp.core.Entidades.Administrador", b =>
                {
                    b.HasBaseType("alquileresapp.core.Entidades.Trabajador");

                    b.HasDiscriminator().HasValue("Administrador");
                });

            modelBuilder.Entity("alquileresapp.core.Entidades.Encargado", b =>
                {
                    b.HasBaseType("alquileresapp.core.Entidades.Trabajador");

                    b.HasDiscriminator().HasValue("Encargado");
                });

            modelBuilder.Entity("alquileresapp.core.Entidades.UsuarioRegistrado", b =>
                {
                    b.HasBaseType("alquileresapp.core.Entidades.Usuario");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasDiscriminator().HasValue("UsuarioRegistrado");
                });

            modelBuilder.Entity("alquileresapp.core.Entidades.Imagen", b =>
                {
                    b.HasOne("alquileresapp.core.Entidades.Propiedad", "Propiedad")
                        .WithMany("Imagenes")
                        .HasForeignKey("PropiedadId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Propiedad");
                });

            modelBuilder.Entity("alquileresapp.core.Entidades.Propiedad", b =>
                {
                    b.HasOne("alquileresapp.core.Entidades.Encargado", "Encargado")
                        .WithMany("Propiedades")
                        .HasForeignKey("EncargadoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Encargado");
                });

            modelBuilder.Entity("alquileresapp.core.Entidades.Reserva", b =>
                {
                    b.HasOne("alquileresapp.core.Entidades.Propiedad", "Propiedad")
                        .WithMany()
                        .HasForeignKey("PropiedadId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("alquileresapp.core.Entidades.UsuarioRegistrado", "Usuario")
                        .WithMany("Reservas")
                        .HasForeignKey("UsuarioRegistradoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Propiedad");

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("alquileresapp.core.Entidades.Tarjeta", b =>
                {
                    b.HasOne("alquileresapp.core.Entidades.Reserva", "Reserva")
                        .WithOne("Tarjeta")
                        .HasForeignKey("alquileresapp.core.Entidades.Tarjeta", "ReservaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Reserva");
                });

            modelBuilder.Entity("alquileresapp.core.Entidades.Propiedad", b =>
                {
                    b.Navigation("Imagenes");
                });

            modelBuilder.Entity("alquileresapp.core.Entidades.Reserva", b =>
                {
                    b.Navigation("Tarjeta")
                        .IsRequired();
                });

            modelBuilder.Entity("alquileresapp.core.Entidades.Encargado", b =>
                {
                    b.Navigation("Propiedades");
                });

            modelBuilder.Entity("alquileresapp.core.Entidades.UsuarioRegistrado", b =>
                {
                    b.Navigation("Reservas");
                });
#pragma warning restore 612, 618
        }
    }
}
