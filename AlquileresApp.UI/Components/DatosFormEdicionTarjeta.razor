@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Components.Forms
@using AlquileresApp.Core.Entidades
@using System.Collections.Generic

@namespace AlquileresApp.UI.Components

<div class="form-container">
    <EditForm Model="@Input" OnValidSubmit="@OnSubmit">
        <DataAnnotationsValidator />

        <div class="form-group">
            <label><i class="fas fa-credit-card"></i> Número de Tarjeta:</label>
            <InputText @bind-Value="Input.NumeroTarjeta" 
                      class="form-control" 
                      placeholder="XXXX XXXX XXXX XXXX"
                      maxlength="19"
                      @oninput="FormatearNumeroTarjeta" />
            <ValidationMessage For="@(() => Input.NumeroTarjeta)" />
        </div>

        <div class="form-group">
            <label><i class="fas fa-user"></i> Nombre del Titular:</label>
            <InputText @bind-Value="Input.Titular" 
                      class="form-control" 
                      placeholder="Como aparece en la tarjeta" />
            <ValidationMessage For="@(() => Input.Titular)" />
        </div>

        <div class="form-row">
            <div class="form-group col-md-6">
                <label><i class="fas fa-calendar"></i> Fecha de Vencimiento:</label>
                <InputText @bind-Value="Input.FechaVencimiento" 
                          class="form-control" 
                          placeholder="MM/AA"
                          maxlength="5"
                          @oninput="FormatearFechaVencimiento" />
                <ValidationMessage For="@(() => Input.FechaVencimiento)" />
                @if (mostrarErrorFechaVencimiento)
                {
                    <div class="validation-message">@ErrorFechaVencimiento</div>
                }
            </div>

            <div class="form-group col-md-6">
                <label><i class="fas fa-lock"></i> CVV:</label>
                <InputText @bind-Value="Input.CVV" 
                          class="form-control" 
                          placeholder="XXX"
                          maxlength="3"
                          @oninput="FormatearCVV" />
                <ValidationMessage For="@(() => Input.CVV)" />
            </div>
        </div>

        <div class="form-actions">
            <button type="submit" class="@ButtonClass" @onclick="ValidarFormulario" disabled="@EstaProcesando">
                <i class="fas fa-save"></i> @SubmitButtonText
            </button>
        </div>
    </EditForm>
</div>

@code {
    [Parameter]
    public InputModel Input { get; set; } = new();

    [Parameter]
    public EventCallback OnSubmit { get; set; }

    [Parameter]
    public string FormName { get; set; } = "";

    [Parameter]
    public string SubmitButtonText { get; set; } = "Guardar";

    [Parameter]
    public string ButtonClass { get; set; } = "btn btn-primary";

    [Parameter]
    public bool EstaProcesando { get; set; } = false;

    private string? ErrorFechaVencimiento { get; set; }
    private bool mostrarErrorFechaVencimiento = false;

    private void FormatearNumeroTarjeta(ChangeEventArgs e)
    {
        var valor = e.Value?.ToString() ?? "";
        // Remover todos los caracteres no numéricos
        var numeros = new string(valor.Where(char.IsDigit).ToArray());
        
        // Limitar a 16 dígitos
        numeros = numeros.Length > 16 ? numeros.Substring(0, 16) : numeros;
        
        // Formatear con espacios cada 4 dígitos
        var formateado = "";
        for (int i = 0; i < numeros.Length; i++)
        {
            if (i > 0 && i % 4 == 0)
                formateado += " ";
            formateado += numeros[i];
        }
        
        Input.NumeroTarjeta = formateado;
    }

    private void FormatearFechaVencimiento(ChangeEventArgs e)
    {
        var valor = e.Value?.ToString() ?? "";
        // Remover todos los caracteres no numéricos
        var numeros = new string(valor.Where(char.IsDigit).ToArray());
        
        // Limitar a 4 dígitos
        numeros = numeros.Length > 4 ? numeros.Substring(0, 4) : numeros;
        
        // Formatear como MM/AA
        var formateado = "";
        for (int i = 0; i < numeros.Length; i++)
        {
            if (i == 2)
                formateado += "/";
            formateado += numeros[i];
        }
        
        Input.FechaVencimiento = formateado;
        mostrarErrorFechaVencimiento = false;
    }

    private void ValidarFechaVencimiento()
    {
        ErrorFechaVencimiento = null;
        mostrarErrorFechaVencimiento = false;

        if (string.IsNullOrWhiteSpace(Input.FechaVencimiento) || 
            !Input.FechaVencimiento.Contains("/") || 
            Input.FechaVencimiento.Length != 5)
        {
            return;
        }

        var partes = Input.FechaVencimiento.Split('/');
        if (partes.Length != 2 || 
            !int.TryParse(partes[0], out int mes) || 
            !int.TryParse(partes[1], out int año) ||
            mes < 1 || mes > 12)
        {
            return;
        }

        var fechaActual = DateTime.Now;
        var añoActual = fechaActual.Year % 100;
        var mesActual = fechaActual.Month;

        // Convertir a año completo para comparación más precisa
        var añoCompleto = 2000 + año; // Asumimos que las tarjetas no son de antes del 2000
        var añoActualCompleto = fechaActual.Year;

        if (añoCompleto < añoActualCompleto || 
            (añoCompleto == añoActualCompleto && mes < mesActual))
        {
            ErrorFechaVencimiento = "La tarjeta está vencida. Por favor, ingrese una fecha válida.";
            mostrarErrorFechaVencimiento = true;
        }
    }

    private void FormatearCVV(ChangeEventArgs e)
    {
        var valor = e.Value?.ToString() ?? "";
        // Remover todos los caracteres no numéricos
        var numeros = new string(valor.Where(char.IsDigit).ToArray());
        
        // Limitar a 3 dígitos
        numeros = numeros.Length > 3 ? numeros.Substring(0, 3) : numeros;
        
        Input.CVV = numeros;
    }

    private async Task ValidarFormulario()
    {
        if (EstaProcesando) return;  // Evitar múltiples envíos
        
        ValidarFechaVencimiento();
        if (!mostrarErrorFechaVencimiento)
        {
            await OnSubmit.InvokeAsync();
        }
    }

    public class InputModel
    {
        [Required(ErrorMessage = "El número de tarjeta es requerido")]
        [RegularExpression(@"^\d{4}\s\d{4}\s\d{4}\s\d{4}$", ErrorMessage = "El número de tarjeta debe tener 16 dígitos")]
        public string NumeroTarjeta { get; set; } = "";

        [Required(ErrorMessage = "El nombre del titular es requerido")]
        [StringLength(100, ErrorMessage = "El nombre del titular no puede exceder los 100 caracteres")]
        public string Titular { get; set; } = "";

        [Required(ErrorMessage = "La fecha de vencimiento es requerida")]
        [RegularExpression(@"^(0[1-9]|1[0-2])/([0-9]{2})$", ErrorMessage = "La fecha debe tener el formato MM/AA")]
        public string FechaVencimiento { get; set; } = "";

        [Required(ErrorMessage = "El CVV es requerido")]
        [RegularExpression(@"^\d{3}$", ErrorMessage = "El CVV debe tener 3 dígitos")]
        public string CVV { get; set; } = "";
    }
}

<style>
    .form-container {
        max-width: 100%;
    }

    .form-group {
        margin-bottom: 1.5rem;
    }

    .form-group label {
        display: block;
        margin-bottom: 0.5rem;
        color: #333;
        font-weight: 500;
    }

    .form-group label i {
        margin-right: 0.5rem;
        color: #0d6efd;
    }

    .form-control {
        width: 100%;
        padding: 0.75rem;
        border: 1px solid #ced4da;
        border-radius: 0.375rem;
        transition: border-color 0.15s ease-in-out, box-shadow 0.15s ease-in-out;
    }

    .form-control:focus {
        border-color: #86b7fe;
        outline: 0;
        box-shadow: 0 0 0 0.25rem rgba(13, 110, 253, 0.25);
    }

    .form-row {
        display: flex;
        flex-wrap: wrap;
        margin-right: -0.5rem;
        margin-left: -0.5rem;
    }

    .col-md-6 {
        flex: 0 0 50%;
        max-width: 50%;
        padding-right: 0.5rem;
        padding-left: 0.5rem;
    }

    .form-actions {
        margin-top: 2rem;
        text-align: center;
    }

    .validation-message {
        color: #dc3545;
        font-size: 0.875rem;
        margin-top: 0.25rem;
    }
</style> 