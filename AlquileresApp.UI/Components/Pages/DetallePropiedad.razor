@page "/propiedad/{Id:int}"
@using AlquileresApp.Core.Entidades
@using AlquileresApp.Core.Interfaces
@using Microsoft.JSInterop
@inject IPropiedadRepositorio PropiedadesRepo
@inject IImagenesRepositorio ImagenesRepo
@inject NavigationManager NavigationManager
@inject AlquileresApp.Core.CasosDeUso.Propiedad.CasoDeUsoListarPropiedades CUListarPropiedades
@inject AlquileresApp.Core.CasosDeUso.Imagen.CasoDeUsoCargarImagen CUAgregarImagen
@inject IJSRuntime JS
@inject IWebHostEnvironment Environment
@using Microsoft.AspNetCore.Components.Forms
@using System.IO

<link href="css/AltaUsuario.css" rel="stylesheet" />
<link href="css/DetallePropiedad.css" rel="stylesheet" />

<PageTitle>Detalles de Propiedad - Alquilando</PageTitle>

<div class="registro-container">
    @if (propiedad == null)
    {
        <div class="registro-form">
            <p>Cargando detalles de la propiedad...</p>
        </div>
    }
    else
    {
        <div class="registro-form">
            <h1 class="registro-title">@propiedad.Titulo</h1>
            
            <div class="propiedad-detalle">
                <div class="propiedad-info">
                    <h2>Detalles de la Propiedad</h2>
                    <div class="info-grupo">
                        <h3>Descripción</h3>
                        <p>@propiedad.Descripcion</p>
                    </div>
                    
                    <div class="info-grupo">
                        <h3>Ubicación</h3>
                        <p><strong>Dirección:</strong> @propiedad.Direccion</p>
                    </div>
                    
                    <div class="info-grupo">
                        <h3>Características</h3>
                        <p><strong>Precio por noche:</strong> $@propiedad.PrecioPorNoche</p>
                        <p><strong>Capacidad:</strong> @propiedad.Capacidad personas</p>
                    </div>

                    <div class="info-grupo">
                        <h3>Imágenes</h3>
                        <div class="imagenes-container">
                            @if (imagenes != null && imagenes.Any())
                            {
                                @foreach (var imagen in imagenes)
                                {
                                    <div class="imagen-item">
                                        <img src="@imagen.Url" alt="Imagen de la propiedad" />
                                    </div>
                                }
                            }
                            else
                            {
                                <p>No hay imágenes disponibles</p>
                            }
                        </div>
                        <div class="upload-section">
                            <InputFile OnChange="@CargarImagen" accept=".jpg,.jpeg,.png" class="file-input" />
                            <button class="btn btn-primary" @onclick="() => OnClickUpload()">
                                <i class="fas fa-upload"></i> Cargar Imagen
                            </button>
                            @if (!string.IsNullOrEmpty(errorMensaje))
                            {
                                <div class="alert alert-danger mt-2">@errorMensaje</div>
                            }
                        </div>
                    </div>
                </div>
            </div>

            <div class="button-group">
                <button class="btn btn-secondary" @onclick="VolverAInicio">Volver al Inicio</button>
            </div>
        </div>
    }
</div>

@code {
    [Parameter]
    public int Id { get; set; }

    private Propiedad? propiedad;
    private List<Imagen>? imagenes;
    private string? errorMensaje;
    private ElementReference fileInput;

    protected override async Task OnInitializedAsync()
    {
        await CargarPropiedad();
        //await CargarImagenes();
    }

    private async Task CargarPropiedad()
    {
        try
        {
            propiedad = CUListarPropiedades.Ejecutar().FirstOrDefault(p => p.Id == Id);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error al cargar la propiedad: {ex.Message}");
        }
    }

    private async Task CargarImagenes()
    {
        try
        {
            imagenes = CUListarPropiedades.Ejecutar().FirstOrDefault(p => p.Id == Id)?.Imagenes;
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error al cargar las imágenes: {ex.Message}");
            imagenes = new List<Imagen>();
        }
    }

    private void OnClickUpload()
    {
        // El InputFile se activará automáticamente cuando se haga clic en el botón
        // No necesitamos hacer nada más aquí
    }

    private async Task CargarImagen(InputFileChangeEventArgs e)
    {
        try
        {
            errorMensaje = null;
            var file = e.File;
            
            if (file != null)
            {
                // Validar formato de la imagen
                var extension = Path.GetExtension(file.Name).ToLowerInvariant();
                if (extension != ".jpg" && extension != ".jpeg" && extension != ".png")
                {
                    errorMensaje = "Solo se permiten imágenes en formato JPG o PNG";
                    return;
                }

                // Generar un nombre único para el archivo
                var fileName = $"{Guid.NewGuid()}{extension}";
                var path = Path.Combine(Environment.WebRootPath, "imagenes", "propiedades", fileName);

                // Asegurarse de que el directorio existe
                Directory.CreateDirectory(Path.GetDirectoryName(path)!);

                // Guardar el archivo
                using (var stream = File.Create(path))
                {
                    await file.OpenReadStream().CopyToAsync(stream);
                }

                // Crear un objeto Imagen con la URL del archivo
                var imagen = new Imagen
                {
                    Url = $"/imagenes/propiedades/{fileName}"
                };

                var urlImagen = CUAgregarImagen.Ejecutar(imagen, Id);
                await CargarImagenes(); // Recargar las imágenes
                errorMensaje = "Imagen cargada exitosamente";
            }
        }
        catch (Exception ex)
        {
            errorMensaje = $"Error al cargar la imagen: {ex.Message}";
        }
    }

    private void VolverAInicio()
    {
        NavigationManager.NavigateTo("/");
    }
} 