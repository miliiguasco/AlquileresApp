@page "/EditarPromocion/{Id:int}"
@using AlquileresApp.Core.Entidades
@using AlquileresApp.Core.CasosDeUso.Promocion
@using AlquileresApp.Core.CasosDeUso.Promocion
@inject CasoDeUsoObtenerPromocion CUObtenerPromocion
@inject CasoDeUsoModificarPromocion CUEditarPromocion
@inject NavigationManager NavigationManager
@inject ILogger<EditarPromocion> Logger

<PageTitle>Editar Promoción</PageTitle>
<link href="css/VerPropiedad.css" rel="stylesheet" />

<div class="propiedad-container bg-light p-4 rounded shadow-sm my-5">
    <h1 class="registro-title">Editar Promoción</h1>

    @if (promocion == null)
    {
        <p>Cargando datos...</p>
    }
    else
    {
        <EditForm Model="@promocion" OnValidSubmit="GuardarEdicion">
            <DataAnnotationsValidator />
            <ValidationSummary />

            <div class="form-group">
                <label>Título</label>
                <InputText class="form-control" @bind-Value="titulo" />
            </div>

            <div class="form-group">
                <label>Descripción</label>
                <InputTextArea class="form-control" @bind-Value="descripcion" rows="3" />
            </div>

            <div class="form-group">
                <label>Fecha de Inicio</label>
                <InputDate class="form-control" @bind-Value="fechaInicio" />
            </div>

            <div class="form-group">
                <label>Fecha de Fin</label>
                <InputDate class="form-control" @bind-Value="fechaFin" />
            </div>

            <div class="form-group">
                <label>Porcentaje de Descuento</label>
                <InputNumber class="form-control" @bind-Value="porcentajeDescuento" />
            </div>

            <div class="button-group">
                <button type="submit" class="btn btn-primary">Guardar Cambios</button>
                <button type="button" class="btn btn-secondary" @onclick="Volver">Cancelar</button>
            </div>

            @if (!string.IsNullOrEmpty(errorMensaje))
            {
                <div class="alert alert-danger mt-2">@errorMensaje</div>
            }
        </EditForm>
    }
</div>

@code {
    [Parameter] public int Id { get; set; }

    private string titulo;
    private string descripcion;
    private DateTime fechaInicio;       
    private DateTime fechaFin;
    private decimal porcentajeDescuento;
    private Promocion? promocion;
    private string? errorMensaje;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            promocion = await Task.Run(() => CUObtenerPromocion.Ejecutar(Id));
            fechaFin = promocion.FechaFin;
            fechaInicio = promocion.FechaInicio;    
            titulo = promocion.Titulo;
            descripcion = promocion.Descripcion;    
            porcentajeDescuento = promocion.PorcentajeDescuento;
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error al cargar la promoción.");
            errorMensaje = "No se pudo cargar la promoción. Intentalo nuevamente.";
        }
    }

    private void  GuardarEdicion()
    {
        try
        {
            CUEditarPromocion.Ejecutar(Id,titulo, descripcion, fechaInicio, fechaFin, porcentajeDescuento);
            NavigationManager.NavigateTo("/Administrar");
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error al guardar los cambios.");
            errorMensaje = "No se pudo guardar la promoción. Revisá los campos.";
        }
    }

    private void Volver(){
        NavigationManager.NavigateTo("/Administrar");
    }
}