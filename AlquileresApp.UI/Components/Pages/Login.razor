@page "/Login"
@page "/Login/{ReturnUrl}"
@using System.ComponentModel.DataAnnotations
@using AlquileresApp.Core.Servicios
@using System.Security.Claims
@using AlquileresApp.Core.CasosDeUso.Usuario
@using AlquileresApp.Core.Interfaces
@using Microsoft.AspNetCore.Components.Authorization
@inject NavigationManager Navigation
@inject IServicioIniciarSesion ServicioIniciarSesion
@inject AuthenticationStateProvider AuthStateProvider
@inject ILogger<Login> Logger

<PageTitle>Iniciar Sesión</PageTitle>

<AuthorizeView Context="authContext">
    <Authorized>
        <div class="alert alert-info" role="alert">
            Ya has iniciado sesión como @authContext.User.Identity?.Name
            <button class="btn btn-link" @onclick="IrAlInicio">Ir al inicio</button>
        </div>
    </Authorized>
    <NotAuthorized>
        <h1>Iniciar Sesión</h1>
        <div class="row">
            <div class="col-md-4">
                <section>
                    <EditForm FormName="login"Model="@DatosIngreso" OnValidSubmit="@AlIniciarSesion">
                        <DataAnnotationsValidator />
                        <hr />
                        <div class="form-floating mb-3">
                            <InputText @bind-Value="DatosIngreso.Email" class="form-control" aria-required="true" />
                            <label for="email" class="form-label">Email</label>
                            <ValidationMessage For="() => DatosIngreso.Email" class="text-danger" />
                        </div>
                        <div class="form-floating mb-3">
                            <InputText type="password" @bind-Value="DatosIngreso.Contraseña" class="form-control" aria-required="true" />
                            <label for="password" class="form-label">Contraseña</label>
                            <ValidationMessage For="() => DatosIngreso.Contraseña" class="text-danger" />
                        </div>
                        @if (!string.IsNullOrEmpty(mensajeError))
                        {
                            <div class="alert alert-danger" role="alert">
                                @mensajeError
                            </div>
                        }
                        @if (!string.IsNullOrEmpty(mensajeExito))
                        {
                            <div class="alert alert-success" role="alert">
                                @mensajeExito
                            </div>
                        }
                        <div>
                            <button type="submit" class="w-100 btn btn-lg btn-primary" disabled="@procesandoLogin">
                                @if (procesandoLogin)
                                {
                                    <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                                    <span>Iniciando sesión...</span>
                                }
                                else
                                {
                                    <span>Iniciar Sesión</span>
                                }
                            </button>
                        </div>
                    </EditForm>
                </section>
            </div>
        </div>
    </NotAuthorized>
</AuthorizeView>

@code {
    [Parameter]
    public string? ReturnUrl { get; set; }

    /// <summary>
    /// Modelo para capturar los datos de inicio de sesión
    /// </summary>
    private ModeloIngreso DatosIngreso { get; set; } = new();
    
    /// <summary>
    /// Mensaje de error para mostrar al usuario
    /// </summary>
    private string? mensajeError = null;
    private string? mensajeExito = null;
    private bool procesandoLogin = false;

    protected override void OnInitialized()
    {
        Console.WriteLine("[Login] Inicializando componente");
        // Validar y limpiar la URL de retorno
        if (!string.IsNullOrEmpty(ReturnUrl))
        {
            ReturnUrl = Uri.UnescapeDataString(ReturnUrl)
                          .Replace("\"", "")
                          .Replace("'", "")
                          .Replace(";", "");

            // Asegurarse de que la URL comienza con /
            if (!ReturnUrl.StartsWith("/"))
            {
                ReturnUrl = "/" + ReturnUrl;
            }
            Console.WriteLine($"[Login] URL de retorno: {ReturnUrl}");
        }
    }

    private void IrAlInicio()
    {
        Navigation.NavigateTo("/");
    }

    /// <summary>
    /// Maneja el proceso de inicio de sesión
    /// </summary>
    private async Task AlIniciarSesion()
    {
        Console.WriteLine("[Login] Iniciando método AlIniciarSesion");
        
        if (procesandoLogin)
        {
            Console.WriteLine("[Login] Ya hay un proceso de login en curso");
            return;
        }

        try
        {
            procesandoLogin = true;
            mensajeError = null;
            mensajeExito = null;
            StateHasChanged();

            Console.WriteLine($"[Login] Intentando login con email: {DatosIngreso.Email}");
            
            // Obtener los datos del usuario autenticado
            var datosUsuario = ServicioIniciarSesion.IniciarSesion(DatosIngreso.Email, DatosIngreso.Contraseña);
            
            Console.WriteLine($"[Login] Resultado de autenticación - IsAuthenticated: {datosUsuario.Identity?.IsAuthenticated}");
            
            if (datosUsuario.Identity?.IsAuthenticated == true)
            {
                Console.WriteLine("[Login] Usuario autenticado exitosamente");
                mensajeExito = "Inicio de sesión exitoso. Redirigiendo...";
                StateHasChanged();

                // Actualizar el estado de autenticación
                var authProvider = (CustomAuthenticationStateProvider)AuthStateProvider;
                authProvider.ActualizarEstadoAutenticacion(datosUsuario);
                
                Console.WriteLine("[Login] Estado de autenticación actualizado");
                
                // Esperar un momento para que se actualice el estado de autenticación
                await Task.Delay(500);

                // Determinar la URL de redirección
                var returnPath = string.IsNullOrEmpty(ReturnUrl) || ReturnUrl == "/Login" ? "/" : ReturnUrl;
                Console.WriteLine($"[Login] Redirigiendo a: {returnPath}");

                try
                {
                    Navigation.NavigateTo(returnPath, false);
                    Console.WriteLine("[Login] Navegación completada");
                }
                catch (Exception ex)
                {
                    Console.WriteLine($"[Login] Error al navegar: {ex.Message}");
                    Navigation.NavigateTo("/", false);
                }
            }
            else
            {
                Console.WriteLine("[Login] Autenticación fallida - Usuario no autenticado");
                mensajeError = "Credenciales inválidas";
                StateHasChanged();
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"[Login] Error durante el login: {ex.Message}");
            Console.WriteLine($"[Login] StackTrace: {ex.StackTrace}");
            mensajeError = ex.Message;
            StateHasChanged();
        }
        finally
        {
            procesandoLogin = false;
            StateHasChanged();
            Console.WriteLine("[Login] Proceso de login finalizado");
        }
    }

    /// <summary>
    /// Modelo para los datos de inicio de sesión
    /// </summary>
    private sealed class ModeloIngreso
    {
        [Required(ErrorMessage = "El email es requerido")]
        [EmailAddress(ErrorMessage = "El email no es válido")]
        public string Email { get; set; } = "";

        [Required(ErrorMessage = "La contraseña es requerida")]
        [StringLength(30, ErrorMessage = "La contraseña debe tener al menos 8 caracteres", MinimumLength = 8)]
        [DataType(DataType.Password)]
        public string Contraseña { get; set; } = "";
    }
}

