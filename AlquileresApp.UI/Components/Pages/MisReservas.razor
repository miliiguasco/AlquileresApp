@page "/misreservas"
@using AlquileresApp.Core.Entidades
@using AlquileresApp.Core.Enumerativos
@using AlquileresApp.Core.CasosDeUso.Reserva
@inject NavigationManager NavigationManager
@inject CasoDeUsoListarMisReservas casoDeUsoListarMisReservas
@inject CasoDeUsoCancelarReserva casoDeUsoCancelarReserva
@using Microsoft.AspNetCore.Components.Authorization
@inject AuthenticationStateProvider AuthenticationStateProvider

<link href="css/MisReservas.css" rel="stylesheet" />
<div class="container_misreservas py-5">
    <h2 class="h2 mb-4">Mis Reservas</h2>

    @if (!string.IsNullOrEmpty(mensajeExito))
    {
        <div class="alert alert-success">@mensajeExito</div>
    }
    @if (!string.IsNullOrEmpty(mensajeError))
    {
        <div class="alert alert-danger">@mensajeError</div>
    }

    @if (!reservas.Any())
    {
        <div class="alert alert-info">No se encontraron reservas registradas.</div>
    }
    else
    {
        <table class="table_misreservas table-hover table-bordered shadow-sm">
            <thead class="table-dark">
                <tr>
                    <th>Propiedad</th>
                    <th>Politica De Cancelacion</th>
                    <th>Fecha inicio</th>
                    <th>Fecha fin</th>
                    <th>Estado</th>
                    <th>Total</th>
                    <th>Acciones</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var reserva in reservas)
                {
                    <tr>
                        <td>@reserva.Propiedad?.Titulo ?? "Propiedad no disponible"</td>
                       <td>@ObtenerDescripcionPolitica(reserva.Propiedad.PoliticaCancelacion)</td>
                        <td>@reserva.FechaInicio.ToShortDateString()</td>
                        <td>@reserva.FechaFin.ToShortDateString()</td>
                        <td>
                            <span class="badge bg-@GetBadgeColor(reserva.Estado)">
                                @reserva.Estado
                            </span>
                        </td>
                        <td>$@reserva.PrecioTotal.ToString("N2")</td>
                        <td>
                            @if (reserva.Estado == EstadoReserva.Pendiente)
                            {
                                <button class=" boton boton-modificar " @onclick="@(() => ModificarReserva(reserva.Id))">
                                    <i class="bi bi-pencil  "></i> Modificar
                                </button>
                                <button class="boton boton-cancelar" @onclick="@(() => CancelarReserva(reserva.Id))">
                                    <i class="bi bi-x-circle "></i> Cancelar
                                </button>
                            }
                            else
                            {
                                <span class="text-muted">Sin acciones</span>
                            }
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    }
</div>

@if (mostrarConfirmacion)
{
    <div class="modal fade show d-block" tabindex="-1" style="background-color: rgba(0,0,0,0.5);">
        <div class="modal-dialog">
    using System.Configuration;
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Confirmar Cancelación</h5>
                    <button type="button" class="btn-close" aria-label="Cerrar" @onclick="CancelarConfirmacion"></button>
                </div>
                <div class="modal-body">
                    <p>¿Estás seguro de que querés cancelar esta reserva?</p>
                </div>
                <div class="modal-footer">
                    <button class="btn btn-secondary" @onclick="CancelarConfirmacion">No</button>
                    <button class="btn btn-danger" @onclick="ConfirmarCancelacion">Sí, Cancelar</button>
                </div>
            </div>
        </div>
    </div>
}

@code {
    private List<Reserva> reservas = new();
    private bool mostrarConfirmacion = false;
    private int reservaAEliminarId;
    private string mensajeError ;
    private string mensajeExito;

    protected override async Task OnInitializedAsync()
    {
        await CargarReservas();
    }

    private  async Task CargarReservas()
{
    var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
    var user = authState.User;

    if (user.Identity != null && user.Identity.IsAuthenticated)
    {
        var userId = user.FindFirst(c => c.Type == "sub")?.Value 
                  ?? user.FindFirst(c => c.Type == "userid")?.Value 
                  ?? user.FindFirst(System.Security.Claims.ClaimTypes.NameIdentifier)?.Value;

        if (!string.IsNullOrEmpty(userId) && int.TryParse(userId, out int id))
        {
            reservas = casoDeUsoListarMisReservas.Ejecutar(id);
        }
        else
        {
            mensajeError = "No se pudo obtener el ID del usuario.";
        }
    }
    else
    {
        mensajeError = "Usuario no autenticado.";
    }
    
}

    private string GetBadgeColor(EstadoReserva estado)
    {
        return estado switch
        {
            EstadoReserva.Pendiente => "warning",
            EstadoReserva.Confirmada => "success",
            EstadoReserva.Cancelada => "secondary",
            _ => "light"
        };
    }

    private void ModificarReserva(int id)
    {
        NavigationManager.NavigateTo($"/modificarreserva/{id}");
    }

    private void CancelarReserva(int id)
    {
        reservaAEliminarId = id;
        mostrarConfirmacion = true;
        mensajeError = null;
        mensajeExito = null;
    }

    private void ConfirmarCancelacion()
{
    try
    {
        var resultado = casoDeUsoCancelarReserva.Ejecutar(reservaAEliminarId);

        if (resultado.EsExitosa)
        {
            mensajeExito = resultado.Mensaje;

            if (resultado.MontoReembolsado.HasValue)
            {
                mensajeExito += $" Monto reembolsado: ${resultado.MontoReembolsado.Value:N2}.";
            }

            CargarReservas( );
        }
        else
        {
            mensajeError = resultado.Mensaje;
        }
    }
    catch (Exception ex)
    {
        mensajeError = $"Ocurrió un error inesperado: {ex.Message}";
    }
    finally
    {
        mostrarConfirmacion = false;
    }
}


    private string ObtenerDescripcionPolitica(PoliticasDeCancelacion politica)
{
    return politica switch
    {
        PoliticasDeCancelacion.Anticipo20_72hs => "Se puede cancelar con 72 horas de anticipación. Se reembolsa el 20%.",
        PoliticasDeCancelacion.SinAnticipo_NoCancelable => "No se puede cancelar.",
        PoliticasDeCancelacion.PagoTotal_48hs_50 => "Se puede cancelar con 48 horas de anticipación. Se reembolsa el 50%.",
        _ => "Política desconocida"
    };
}

    private void CancelarConfirmacion()
    {
        mostrarConfirmacion = false;
    }
}
