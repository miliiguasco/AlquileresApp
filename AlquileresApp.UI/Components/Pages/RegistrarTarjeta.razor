@page "/registrar-tarjeta"
@rendermode InteractiveServer
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.Authorization
@using System.Security.Claims
@using AlquileresApp.Core.Entidades
@using AlquileresApp.Core.Interfaces
@using AlquileresApp.Core.CasosDeUso.Tarjeta
@using AlquileresApp.UI.Components
@inject AuthenticationStateProvider ServicioAutenticacion
@inject IUsuarioRepositorio UsuarioRepositorio
@inject ILogger<RegistrarTarjeta> Logger
@inject NavigationManager NavigationManager
@inject CasoDeUsoRegistrarTarjeta CURegistrarTarjeta
@inject IJSRuntime JS
@attribute [Authorize]

<PageTitle>Registrar Tarjeta</PageTitle>

<div class="profile-container">
    @if (usuario != null)
    {
        <div class="profile-header">
            <h1>Registrar Tarjeta</h1>
        </div>

        <div class="profile-content">
            <div class="profile-section">
                <div class="btn-container">
                    <h2>Datos de la Tarjeta</h2>
                </div>
                <DatosFormEdicionTarjeta Input="@datosForm" 
                                    OnSubmit="OnRegistrarTarjeta"
                                    FormName="registrarTarjeta"
                                    SubmitButtonText="Registrar Tarjeta"
                                    EstaProcesando="@estaProcesando" 
                                    CancelarEdicion="VolverAPerfil"/>          
            </div>
        </div>
    }
    else
    {
        <div class="profile-container">
            <div class="profile-section">
                <div class="alert alert-info">
                    @if (_error != null)
                    {
                        <div class="d-flex flex-column align-items-center">
                            <i class="fas fa-exclamation-circle mb-3" style="font-size: 2rem;"></i>
                            <p class="text-center">@_error</p>
                        </div>
                    }
                    else
                    {
                        <div class="d-flex flex-column align-items-center">
                            <i class="fas fa-spinner fa-spin mb-3" style="font-size: 2rem;"></i>
                            <p class="text-center">Cargando información...</p>
                        </div>
                    }
                </div>
            </div>
        </div>
    }
</div>

@if (!string.IsNullOrEmpty(mensajeExito))
{
    <div class="alert alert-success alert-dismissible fade show mt-4" role="alert">
        <div class="d-flex align-items-center">
            <i class="fas fa-check-circle me-2"></i>
            <div>
                <h4 class="alert-heading">¡Operación Exitosa!</h4>
                <p>@mensajeExito</p>
            </div>
        </div>
    </div>
}

@code {
    private Usuario? usuario;
    private string? _error;
    private DatosFormEdicionTarjeta.InputModel datosForm = new();
    private string? mensajeExito;
    private bool estaProcesando = false;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            var authState = await ServicioAutenticacion.GetAuthenticationStateAsync();
            var email = authState.User.FindFirst(ClaimTypes.Email)?.Value;
            
            if (email != null)
            {
                usuario = UsuarioRepositorio.ObtenerUsuarioPorEmail(email);
                if (usuario == null)
                {
                    _error = "No se han encontrado tarjetas para el usuario";
                    Logger.LogWarning(_error);
                }
            }
            else
            {
                _error = "No se pudo obtener el email del usuario autenticado";
                Logger.LogWarning(_error);
            }
        }
        catch (Exception ex)
        {
            _error = $"Error al cargar la información: {ex.Message}";
            Logger.LogError(_error);
        }
    }

    private void CancelarRegistro()
    {
        NavigationManager.NavigateTo("/Perfil");
    }

    private async Task OnRegistrarTarjeta()
    {
        if (estaProcesando) return;

        try
        {
            estaProcesando = true;
            StateHasChanged();

            if (usuario == null)
            {
                throw new Exception("No se ha encontrado el usuario");
            }

            CURegistrarTarjeta.Ejecutar(
                usuario.Id,
                datosForm.NumeroTarjeta.Replace(" ", ""),
                datosForm.Titular,
                datosForm.FechaVencimiento,
                datosForm.CVV,
                100000m  // Saldo inicial de 100,000
            );
            
            mensajeExito = "La tarjeta ha sido registrada exitosamente";
            StateHasChanged();
        }
        catch (Exception ex)
        {
            _error = $"Error al registrar la tarjeta: {ex.Message}";
            Logger.LogError(_error);
            await JS.InvokeVoidAsync("alert", _error);
            estaProcesando = false;
            StateHasChanged();
        }
    }

    private async Task VolverAPerfil()
    {   
        var authState = await ServicioAutenticacion.GetAuthenticationStateAsync();
        var user = authState.User;
        var userId = user.FindFirst(ClaimTypes.NameIdentifier)?.Value;
        NavigationManager.NavigateTo($"/Perfil/{userId}");
    }
}

<style>
    .profile-container {
        max-width: 800px;
        margin: 2rem auto;
        padding: 2rem;
        background: white;
        border-radius: 15px;
        box-shadow: 0 4px 20px rgba(0, 0, 0, 0.1);
    }

    .profile-header {
        margin-bottom: 2rem;
        text-align: center;
    }

    .profile-header h1 {
        color: #333;
        font-size: 2rem;
        margin: 0;
    }

    .profile-content {
        display: flex;
        flex-direction: column;
        gap: 2rem;
    }

    .profile-section {
        background: #f8f9fa;
        padding: 2rem;
        border-radius: 10px;
    }

    .btn-container {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 1.5rem;
    }

    .btn-container h2 {
        margin: 0;
        color: #333;
        font-size: 1.5rem;
    }

    .btn-outline {
        background: none;
        border: 1px solid #dc3545;
        color: #dc3545;
        padding: 0.5rem 1rem;
        border-radius: 5px;
        cursor: pointer;
        transition: all 0.3s ease;
    }

    .btn-outline:hover {
        background: #dc3545;
        color: white;
    }

    .btn {
        background-color: #007bff;
        color: white;
        border: none;
        padding: 0.75rem 1.5rem;
        border-radius: 5px;
        cursor: pointer;
        font-weight: 500;
        transition: background-color 0.3s ease;
    }

    .btn:hover {
        background-color: #0056b3;
    }

    .alert-success {
        background-color: #d4edda;
        border-color: #c3e6cb;
        color: #155724;
        padding: 1rem;
        border-radius: 0.375rem;
        margin-top: 1rem;
    }

    .alert-success i {
        font-size: 1.5rem;
        color: #28a745;
    }

    .alert-heading {
        margin-bottom: 0.5rem;
        font-size: 1.25rem;
    }

    .alert-info {
        background-color: #e8f4f8;
        border-color: #bee5eb;
        color: #0c5460;
        padding: 2rem;
        border-radius: 10px;
        text-align: center;
    }

    .alert-info i {
        color: #17a2b8;
    }

    .alert-info p {
        margin: 0;
        font-size: 1.1rem;
    }

    .btn-primary {
        background-color: #007bff;
        color: white;
        border: none;
        padding: 0.75rem 1.5rem;
        border-radius: 5px;
        cursor: pointer;
        font-weight: 500;
        transition: background-color 0.3s ease;
        display: inline-flex;
        align-items: center;
        gap: 0.5rem;
    }

    .btn-primary:hover {
        background-color: #0056b3;
    }

    .btn-primary i {
        font-size: 1rem;
    }
</style> 