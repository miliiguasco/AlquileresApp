@page "/Perfil"
@rendermode InteractiveServer
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.Authorization
@using System.Security.Claims
@using AlquileresApp.Core.Entidades
@using AlquileresApp.Core.Interfaces
@using AlquileresApp.UI.Components
@inject AuthenticationStateProvider ServicioAutenticacion
@inject IUsuarioRepositorio UsuarioRepositorio
@inject ILogger<Perfil> Logger
@inject NavigationManager NavigationManager
@attribute [Authorize]

<PageTitle>Mi Perfil</PageTitle>

<div class="profile-container">
    @if (usuario != null)
    {
        <div class="profile-header">
            <h1>Mi Perfil</h1>
        </div>

        @if (modoEdicion)
        {
            <div class="profile-content">
                <div class="profile-section">
                    <div class="btn-container">
                        <h2>Editar Información Personal</h2>
                        <button class="btn-outline" @onclick="CancelarEdicion">
                            <i class="fas fa-times"></i> 
                        </button>
                    </div>
                    <DatosFormEdicion Input="@datosForm" 
                                  OnSubmit="GuardarCambios"
                                  FormName="editarPerfil"
                                  SubmitButtonText="Guardar"
                                  ButtonClass="btn" />          
                </div>
            </div>
        }
        else
        {
            <div class="profile-content">
                
                <div class="profile-section">
                    <h2>Información Personal</h2>
                    <div class="info-group">
                        <label>Nombre:</label>
                        <span>@usuario.Nombre</span>
                    </div>
                    <div class="info-group">
                        <label>Apellido:</label>
                        <span>@usuario.Apellido</span>
                    </div>
                    <div class="info-group">
                        <label>Email:</label>
                        <span>@usuario.Email</span>
                    </div>
                    <div class="info-group">
                        <label>Teléfono:</label>
                        <span>@usuario.Telefono</span>
                    </div>
                    <div class="info-group">
                        <label>Fecha de Nacimiento:</label>
                        <span>@(usuario.FechaNacimiento?.ToShortDateString() ?? "No especificada")</span>
                    </div>
                </div>

                <div class="profile-actions">   
                    <button type="button" class="btn" @onclick="IniciarEdicion">
                        <i class="fas fa-edit"></i> Editar Perfil
                    </button>
                </div>
            </div>
        }
    }
    else
    {
        <div class="alert alert-info">
            @if (_error != null)
            {
                <p>Error: @_error</p>
            }
            else
            {
                <p>Cargando información del perfil...</p>
            }
        </div>
    }
</div>

@if (!string.IsNullOrEmpty(mensajeExito))
{
    <div class="alert alert-success alert-dismissible fade show mt-4" role="alert">
        @mensajeExito
        <button type="button" class="btn-close" @onclick="@(() => mensajeExito = null)"></button>
    </div>
}

@code {
    private Usuario? usuario;
    private string? _error;
    private bool modoEdicion = false;
    private bool mostrarCambioPassword = false;
    private DatosFormEdicion.InputModel datosForm = new();
    private string? mensajeExito;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            var authState = await ServicioAutenticacion.GetAuthenticationStateAsync();
            Logger.LogInformation("Estado de autenticación obtenido");
            
            // Imprimir todas las claims disponibles
            foreach (var claim in authState.User.Claims)
            {
                Logger.LogInformation($"Claim: {claim.Type} = {claim.Value}");
            }

            var email = authState.User.FindFirst(ClaimTypes.Email)?.Value;
            Logger.LogInformation($"Email from claims: {email}");
            
            if (email != null)
            {
                usuario = UsuarioRepositorio.ObtenerUsuarioPorEmail(email);
                if (usuario == null)
                {
                    _error = $"No se encontró usuario con email: {email}";
                    Logger.LogWarning(_error);
                }
                else
                {
                    Logger.LogInformation($"Usuario encontrado: {usuario.Nombre} {usuario.Apellido}");
                }
            }
            else
            {
                _error = "No se pudo obtener el email del usuario autenticado";
                Logger.LogWarning(_error);
            }
        }
        catch (Exception ex)
        {
            _error = $"Error al cargar el perfil: {ex.Message}";
            Logger.LogError(_error);
        }
    }

    private void IniciarEdicion()
    {
        datosForm = new DatosFormEdicion.InputModel
        {
            Nombre = usuario!.Nombre,
            Apellido = usuario.Apellido,
            Email = usuario.Email,
            Telefono = usuario.Telefono,
            FechaDeNacimiento = usuario.FechaNacimiento
        };
        modoEdicion = true;
    }

    private void CancelarEdicion()
    {
        modoEdicion = false;
        mostrarCambioPassword = false;
        datosForm = new();
    }

    private async Task GuardarCambios()
    {
        try
        {
            usuario!.Nombre = datosForm.Nombre;
            usuario.Apellido = datosForm.Apellido;
            usuario.Email = datosForm.Email;
            usuario.Telefono = datosForm.Telefono;
            usuario.FechaNacimiento = datosForm.FechaDeNacimiento;

            await Task.Run(() => UsuarioRepositorio.ModificarUsuario(usuario));
            
            modoEdicion = false;
            mensajeExito = "Perfil actualizado exitosamente";
            StateHasChanged();
        }
        catch (Exception ex)
        {
            _error = $"Error al actualizar el perfil: {ex.Message}";
            Logger.LogError(_error);
        }
    }
} 