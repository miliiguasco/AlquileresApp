@page "/Perfil"
@rendermode InteractiveServer
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.Authorization
@using System.Security.Claims
@using AlquileresApp.Core.Entidades
@using AlquileresApp.Core.Interfaces
@using AlquileresApp.Core.CasosDeUso.Tarjeta
@using AlquileresApp.Core.CasosDeUso.Reserva
@using AlquileresApp.UI.Components
@inject AuthenticationStateProvider ServicioAutenticacion
@inject IUsuarioRepositorio UsuarioRepositorio
@inject ILogger<Perfil> Logger
@inject NavigationManager NavigationManager
@inject CasoDeUsoVisualizarTarjeta CUVisualizarTarjeta
@inject CasoDeUsoEliminarTarjeta CUEliminarTarjeta
@inject CasoDeUsoVisualizarReserva CUVisualizarReserva
@inject IJSRuntime JS
@attribute [Authorize]

<PageTitle>Mi Perfil</PageTitle>

<div class="profile-container">
    @if (usuario != null)
    {
        <div class="profile-header">
            <h1>Mi Perfil</h1>
        </div>

        @if (esAdministrador)
        {
            <div class="profile-section">
                @if (modoEdicion)
                {
                    <h2>Editar Información Personal</h2>
                    <DatosFormEdicion Input="@datosForm" 
                                  OnSubmit="GuardarCambios"
                                  FormName="editarPerfil"
                                  SubmitButtonText="Guardar"
                                  ButtonClass="btn"
                                  CancelarEdicion="CancelarEdicion" />          
                }
                else
                {
                    <h2>Información Personal</h2>
                    <div class="info-group">
                        <label>Nombre:</label>
                        <span>@usuario.Nombre</span>
                    </div>
                    <div class="info-group">
                        <label>Apellido:</label>
                        <span>@usuario.Apellido</span>
                    </div>
                    <div class="info-group">
                        <label>Email:</label>
                        <span>@usuario.Email</span>
                    </div>
                    <div class="info-group">
                        <label>Teléfono:</label>
                        <span>@usuario.Telefono</span>
                    </div>
                    <div class="info-group">
                        <label>Fecha de Nacimiento:</label>
                        <span>@(usuario.FechaNacimiento?.ToShortDateString() ?? "No especificada")</span>
                    </div>
                    <div class="profile-actions">   
                        @if (!string.IsNullOrEmpty(mensajeExito))
                        {
                            <div class="mensaje-exito">@mensajeExito</div>
                        }   
                        <button type="button" class="btn" @onclick="IniciarEdicion">
                            <i class="fas fa-edit"></i> Editar Perfil
                        </button>
                    </div>
                }
            </div>
        }
        else
        {
            <div class="tabs-container">
                <div class="tabs">
                    <button class="tab-button @(tabActiva == "datos" ? "active" : "")" 
                            @onclick="@(() => CambiarTab("datos"))">
                        <i class="fas fa-user"></i> Datos Personales
                    </button>
                    <button class="tab-button @(tabActiva == "pagos" ? "active" : "")" 
                            @onclick="@(() => CambiarTab("pagos"))">
                        <i class="fas fa-credit-card"></i> Método de Pago
                    </button>
                    <button class="tab-button @(tabActiva == "reservas" ? "active" : "")" 
                            @onclick="@(() => CambiarTab("reservas"))">
                        <i class="fas fa-calendar-alt"></i> Reservas
                    </button>
                </div>

                @if (mostrarEliminarTarjeta)
                {
                    <div class="profile-section">
                        <div class="btn-container">
                            <h2>Seleccionar Tarjeta a Eliminar</h2>
                            <button class="btn-outline" @onclick="CancelarEliminacion">
                                <i class="fas fa-times"></i> 
                            </button>
                        </div>
                        @if (tarjetas != null && tarjetas.Any())
                        {
                            <div class="tarjetas-list">
                                @foreach (var tarjeta in tarjetas)
                                {
                                    <div class="tarjeta-item">
                                        <div class="form-check">
                                            <input class="form-check-input" type="radio" 
                                                   id="tarjeta-@tarjeta.Id" 
                                                   name="tarjetaSeleccionada"
                                                   @onchange="@(() => SeleccionarTarjeta(tarjeta.Id))"
                                                   checked="@(tarjetaSeleccionada == tarjeta.Id)">
                                            <label class="form-check-label" for="tarjeta-@tarjeta.Id">
                                                **** **** **** @tarjeta.NumeroTarjeta.Substring(tarjeta.NumeroTarjeta.Length - 4)
                                            </label>
                                        </div>
                                        <div class="tarjeta-info">
                                            <small>Titular: @tarjeta.Titular</small>
                                            <small>Vence: @tarjeta.FechaVencimiento</small>
                                        </div>
                                    </div>
                                }
                            </div>
                            <div class="mt-3">
                                <button class="btn btn-danger" @onclick="ConfirmarEliminacion" disabled="@(tarjetaSeleccionada == 0)">
                                    <i class="fas fa-trash"></i> Eliminar Tarjeta Seleccionada
                                </button>
                            </div>
                        }
                        else
                        {
                            <div class="alert alert-info">
                                No tienes tarjetas registradas.
                            </div>
                        }
                    </div>
                }

                <div class="tab-content">
                    @if (tabActiva == "datos")
                    {
                        <div class="tab-pane active">
                            <div class="profile-section">
                                @if (modoEdicion)
                                {
                                    <h2>Editar Información Personal</h2>
                                    <DatosFormEdicion Input="@datosForm" 
                                                  OnSubmit="GuardarCambios"
                                                  FormName="editarPerfil"
                                                  SubmitButtonText="Guardar"
                                                  ButtonClass="btn"
                                                  CancelarEdicion="CancelarEdicion" />          
                                }
                                else
                                {
                                    <h3>Información Personal</h3>
                                    <div class="info-group">
                                        <label>Nombre</label>
                                        <span>@usuario.Nombre</span>
                                    </div>
                                    <div class="info-group">
                                        <label>Apellido</label>
                                        <span>@usuario.Apellido</span>
                                    </div>
                                    <div class="info-group">
                                        <label>Email</label>
                                        <span>@usuario.Email</span>
                                    </div>
                                    <div class="info-group">
                                        <label>Teléfono</label>
                                        <span>@usuario.Telefono</span>
                                    </div>
                                    <div class="info-group">
                                        <label>Fecha de Nacimiento</label>
                                        <span>@(usuario.FechaNacimiento?.ToShortDateString() ?? "No especificada")</span>
                                    </div>
                                    <div class="profile-actions">
                                        @if (!string.IsNullOrEmpty(mensajeExito))
                                        {
                                            <div class="mensaje-exito">@mensajeExito</div>
                                        }   
                                        <button type="button" class="btn" @onclick="IniciarEdicion">
                                            <i class="fas fa-edit"></i> Editar Perfil
                                        </button>
                                    </div>
                                }
                            </div>
                        </div>
                    }
                    else if (tabActiva == "pagos")
                    {
                        <div class="tab-pane active" style="display: block;">
                            <div class="profile-section">
                                <h3>Métodos de Pago</h3>
                                <div class="payment-methods-actions">   
                                    <button type="button" class="btn btn-info" @onclick="IrAVerTarjeta">
                                        <i class="fas fa-credit-card"></i> Ver Tarjeta
                                    </button>
                                    <button type="button" class="btn btn-success" @onclick="IrAEditarTarjeta">
                                        <i class="fas fa-edit"></i> Editar Tarjeta
                                    </button>
                                    <button type="button" class="btn btn-danger" @onclick="IniciarEliminacion">
                                        <i class="fas fa-trash"></i> Eliminar Tarjeta
                                    </button>
                                    <button type="button" class="btn btn-warning" @onclick="IrARegistrarTarjeta">
                                        <i class="fas fa-plus-circle"></i> Registrar Nueva Tarjeta
                                    </button>
                                </div>
                            </div>
                        </div>
                    }
                    else if (tabActiva == "reservas")
                    {
                        <div class="tab-pane active" style="display: block;">
                            <div class="profile-section">
                                <h3>Mis Reservas</h3>
                                @if (reservas == null)
                                {
                                    <div class="d-flex justify-content-center">
                                        <div class="spinner-border text-primary" role="status">
                                            <span class="visually-hidden">Cargando...</span>
                                        </div>
                                    </div>
                                }
                                else if (!reservas.Any())
                                {
                                    <div class="alert alert-info">
                                        No tienes reservas activas.
                                    </div>
                                }
                                else
                                {
                                    <div class="table-responsive">
                                        <table class="table table-hover">
                                            <thead>
                                                <tr>
                                                    <th>ID</th>
                                                    <th>Propiedad</th>
                                                    <th>Estado</th>
                                                    <th>Fecha Inicio</th>
                                                    <th>Fecha Fin</th>
                                                    <th>Precio Total</th>
                                                    <th>Acciones</th>
                                                </tr>
                                            </thead>
                                            <tbody>
                                                @foreach (var reserva in reservas)
                                                {
                                                    <tr>
                                                        <td>@reserva.Id</td>
                                                        <td>@reserva.Propiedad?.Titulo</td>
                                                        <td>
                                                            <span class="badge @ObtenerClaseEstado(reserva.Estado.ToString())">
                                                                @reserva.Estado
                                                            </span>
                                                        </td>
                                                        <td>@reserva.FechaInicio.ToShortDateString()</td>
                                                        <td>@reserva.FechaFin.ToShortDateString()</td>
                                                        <td>$@reserva.PrecioTotal.ToString("N2")</td>
                                                        <td>
                                                            <div class="btn-group" role="group">
                                                                <button class="btn btn-primary btn-sm" @onclick="() => VerDetalleReserva(reserva.Id)">
                                                                    <i class="fas fa-eye"></i> Ver
                                                                </button>
                                                                <button class="btn btn-warning btn-sm" @onclick="() => EditarReserva(reserva.Id)">
                                                                    <i class="fas fa-edit"></i> Editar
                                                                </button>
                                                                <button class="btn btn-danger btn-sm" @onclick="() => EliminarReserva(reserva.Id)">
                                                                    <i class="fas fa-trash"></i> Eliminar
                                                                </button>
                                                            </div>
                                                        </td>
                                                    </tr>
                                                }
                                            </tbody>
                                        </table>
                                    </div>
                                }
                            </div>
                        </div>
                    }
                </div>
            </div>
        }
    }
    else
    {
        <div class="alert alert-info">
            @if (_error != null)
            {
                <p>Error: @_error</p>
            }
            else
            {
                <p>Cargando información del perfil...</p>
            }
        </div>
    }
</div>

@code {
    [Parameter]
    public int? userId { get; set; }

    private Usuario? usuario;
    private string? _error;
    private bool modoEdicion = false;
    private string? mensajeExito;
    private bool esAdministrador = false;
    private string tabActiva = "datos";
    private bool mostrarEliminarTarjeta = false;
    private List<Tarjeta>? tarjetas;
    private int tarjetaSeleccionada = 0;
    private DatosFormEdicion.InputModel datosForm = new();
    private List<Reserva>? reservas;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            var authState = await ServicioAutenticacion.GetAuthenticationStateAsync();
            var user = authState.User;

            if (user.Identity?.IsAuthenticated != true)
            {
                NavigationManager.NavigateTo("/login");
                return;
            }

            var userEmail = user.FindFirst(ClaimTypes.Email)?.Value;
            if (string.IsNullOrEmpty(userEmail))
            {
                NavigationManager.NavigateTo("/login");
                return;
            }

            usuario = UsuarioRepositorio.ObtenerUsuarioPorEmail(userEmail);
            if (usuario == null)
            {
                _error = "No se pudo cargar la información del usuario.";
                return;
            }

            // Si se proporcionó un userId en la URL, verificar que coincida con el usuario actual
            if (userId.HasValue && userId.Value != usuario.Id)
            {
                NavigationManager.NavigateTo($"/Perfil/{usuario.Id}");
                return;
            }

            esAdministrador = user.IsInRole("Administrador");
            await CargarTarjetas();
            await CargarReservas();
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error al cargar el perfil del usuario");
            _error = "Ocurrió un error al cargar el perfil.";
        }
    }

    private async Task CambiarTab(string tab)
    {
        tabActiva = tab;
        if (modoEdicion)
        {
            CancelarEdicion();
        }
        
        if (tab == "reservas")
        {
            await CargarReservas();
        }
    }

    private void IniciarEdicion()
    {
        datosForm = new DatosFormEdicion.InputModel
        {
            Nombre = usuario!.Nombre,
            Apellido = usuario.Apellido,
            Email = usuario.Email,
            Telefono = usuario.Telefono,
            FechaDeNacimiento = usuario.FechaNacimiento
        };
        modoEdicion = true;
    }

    private void CancelarEdicion()
    {
        modoEdicion = false;
        datosForm = new();
    }

    private async Task GuardarCambios()
    {
        try
        {
            usuario!.Nombre = datosForm.Nombre;
            usuario.Apellido = datosForm.Apellido;
            usuario.Email = datosForm.Email;
            usuario.Telefono = datosForm.Telefono;
            usuario.FechaNacimiento = datosForm.FechaDeNacimiento;

            await Task.Run(() => UsuarioRepositorio.ModificarUsuario(usuario));
            
            modoEdicion = false;
            mensajeExito = "Perfil actualizado exitosamente";
            StateHasChanged();
        }
        catch (Exception ex)
        {
            _error = $"Error al actualizar el perfil: {ex.Message}";
        }
    }

    private void IrAVerTarjeta()
    {
        if (usuario != null)
        {
            NavigationManager.NavigateTo($"/visualizar-tarjeta");
        }
    }

    private void IrAEditarTarjeta()
    {
        NavigationManager.NavigateTo("/editar-tarjeta");
    }

    private void IniciarEliminacion()
    {
        mostrarEliminarTarjeta = true;
        tarjetas = CUVisualizarTarjeta.Ejecutar(usuario!.Id);
        tarjetaSeleccionada = 0;
    }

    private void CancelarEliminacion()
    {
        mostrarEliminarTarjeta = false;
        tarjetas = null;
        tarjetaSeleccionada = 0;
    }

    private void SeleccionarTarjeta(int tarjetaId)
    {
        tarjetaSeleccionada = tarjetaId;
        StateHasChanged();
    }

    private async Task ConfirmarEliminacion()
    {
        if (tarjetaSeleccionada == 0)
        {
            await JS.InvokeVoidAsync("alert", "Por favor, seleccione una tarjeta para eliminar.");
            return;
        }

        var confirmacion = await JS.InvokeAsync<bool>("confirm", "¿Estás seguro de que deseas eliminar esta tarjeta?");
        if (confirmacion)
        {
            try
            {
                await CUEliminarTarjeta.Ejecutar(tarjetaSeleccionada);
                await JS.InvokeVoidAsync("alert", "Tarjeta eliminada exitosamente");
                CancelarEliminacion();
            }
            catch (Exception ex)
            {
                await JS.InvokeVoidAsync("alert", $"Error al eliminar la tarjeta: {ex.Message}");
            }
        }
    }

    private void IrARegistrarTarjeta()
    {
        NavigationManager.NavigateTo("/registrar-tarjeta");
    }

    private async Task CargarTarjetas()
    {
        // Implementa la lógica para cargar las tarjetas del usuario
    }

    private async Task CargarReservas()
    {
        if (usuario != null)
        {
            try
            {
                reservas = await Task.Run(() => CUVisualizarReserva.Ejecutar(usuario.Id));
                StateHasChanged();
            }
            catch (Exception ex)
            {
                Logger.LogError(ex, "Error al cargar las reservas del usuario");
                _error = "Error al cargar las reservas";
            }
        }
    }

    private void VerDetalleReserva(int reservaId)
    {
        NavigationManager.NavigateTo($"/reserva/{reservaId}");
    }

    private void EditarReserva(int reservaId)
    {
        NavigationManager.NavigateTo($"/editar-reserva/{reservaId}");
    }

    private async Task EliminarReserva(int reservaId)
    {
        var confirmacion = await JS.InvokeAsync<bool>("confirm", "¿Estás seguro de que deseas eliminar esta reserva?");
        if (confirmacion)
        {
            try
            {
                // Aquí deberías llamar al caso de uso para eliminar la reserva
                // await CUEliminarReserva.Ejecutar(reservaId);
                await JS.InvokeVoidAsync("alert", "Reserva eliminada exitosamente");
                await CargarReservas(); // Recargar la lista de reservas
            }
            catch (Exception ex)
            {
                await JS.InvokeVoidAsync("alert", $"Error al eliminar la reserva: {ex.Message}");
            }
        }
    }

    private string ObtenerClaseEstado(string estado)
    {
        return estado.ToLower() switch
        {
            "pendiente" => "bg-warning",
            "confirmada" => "bg-success",
            "cancelada" => "bg-danger",
            "activa" => "bg-info",
            "finalizada" => "bg-secondary",
            _ => "bg-secondary"
        };
    }
}

<style>
    .profile-actions {
        display: flex;
        gap: 1rem;
        justify-content: center;
        margin-top: 2rem;
        flex-wrap: wrap;
    }

    .profile-actions button {
        display: flex;
        align-items: center;
        gap: 0.5rem;
        padding: 0.5rem 1rem;
        border-radius: 6px;
        font-weight: 500;
        transition: all 0.3s ease;
        color: white;
        border: none;
    }

    .profile-actions button:hover {
        transform: translateY(-2px);
        box-shadow: 0 4px 8px rgba(0,0,0,0.1);
    }

    .profile-actions .btn-primary {
        background-color: #4a9cb5;
        border-color: #4a9cb5;
    }

    .profile-actions .btn-primary:hover {
        background-color: #3d8ba0;
    }

    .profile-actions .btn-info {
        background-color: #17a2b8;
        border-color: #17a2b8;
        color: white;
    }

    .profile-actions .btn-info:hover {
        background-color: #138496;
    }

    .profile-actions .btn-success {
        background-color: #28a745;
        border-color: #28a745;
    }

    .profile-actions .btn-success:hover {
        background-color: #218838;
    }

    .profile-actions .btn-danger {
        background-color: #dc3545;
        border-color: #dc3545;
    }

    .profile-actions .btn-danger:hover {
        background-color: #c82333;
    }

    .profile-actions .btn-warning {
        background-color: #ffc107;
        border-color: #ffc107;
        color: white;
    }

    .profile-actions .btn-warning:hover {
        background-color: #e0a800;
    }

    .profile-actions button i {
        font-size: 1.1rem;
    }

    .tarjetas-list {
        margin-top: 1rem;
    }

    .tarjeta-item {
        display: flex;
        justify-content: space-between;
        align-items: center;
        padding: 1rem;
        border: 1px solid #dee2e6;
        border-radius: 8px;
        margin-bottom: 0.5rem;
        background-color: #f8f9fa;
    }

    .tarjeta-item:hover {
        background-color: #e9ecef;
    }

    .tarjeta-info {
        display: flex;
        flex-direction: column;
        gap: 0.25rem;
    }

    .tarjeta-info small {
        color: #6c757d;
    }

    .form-check {
        display: flex;
        align-items: center;
        gap: 0.5rem;
    }

    .form-check-input {
        width: 1.25rem;
        height: 1.25rem;
        margin-top: 0;
    }

    .form-check-label {
        font-weight: 500;
        color: #495057;
    }

    .reservas-grid {
        display: grid;
        grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
        gap: 1.5rem;
        margin-top: 1rem;
    }

    .reserva-card {
        background: white;
        border-radius: 8px;
        box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        overflow: hidden;
        transition: transform 0.2s ease;
    }

    .reserva-card:hover {
        transform: translateY(-2px);
        box-shadow: 0 4px 8px rgba(0,0,0,0.15);
    }

    .reserva-header {
        padding: 1rem;
        background: #f8f9fa;
        border-bottom: 1px solid #dee2e6;
        display: flex;
        justify-content: space-between;
        align-items: center;
    }

    .reserva-header h4 {
        margin: 0;
        color: #495057;
    }

    .estado-badge {
        padding: 0.25rem 0.5rem;
        border-radius: 4px;
        font-size: 0.875rem;
        font-weight: 500;
    }

    .estado-badge.pendiente {
        background-color: #ffc107;
        color: #000;
    }

    .estado-badge.confirmada {
        background-color: #28a745;
        color: white;
    }

    .estado-badge.cancelada {
        background-color: #dc3545;
        color: white;
    }

    .estado-badge.finalizada {
        background-color: #6c757d;
        color: white;
    }

    .reserva-body {
        padding: 1rem;
    }

    .reserva-footer {
        padding: 1rem;
        border-top: 1px solid #dee2e6;
        display: flex;
        justify-content: flex-end;
    }

    .reserva-footer .btn {
        padding: 0.5rem 1rem;
    }

    .card {
        border: none;
        border-radius: 10px;
        transition: transform 0.2s ease;
    }

    .card:hover {
        transform: translateY(-2px);
    }

    .card-header {
        border-radius: 10px 10px 0 0 !important;
    }

    .badge {
        padding: 0.5em 1em;
        font-size: 0.9em;
    }

    .btn {
        border-radius: 5px;
        padding: 0.5rem 1.5rem;
    }

    .btn i {
        margin-right: 0.5rem;
    }

    .table {
        margin-top: 1rem;
    }

    .table th {
        background-color: #f8f9fa;
        font-weight: 600;
    }

    .table td {
        vertical-align: middle;
    }

    .btn-sm {
        padding: 0.25rem 0.5rem;
        font-size: 0.875rem;
    }

    .payment-methods-actions {
        display: flex;
        flex-direction: row;
        gap: 1rem;
        justify-content: center;
        margin-top: 2rem;
        flex-wrap: wrap;
    }

    .payment-methods-actions button {
        display: flex;
        align-items: center;
        gap: 0.5rem;
        padding: 0.5rem 1rem;
        border-radius: 6px;
        font-weight: 500;
        transition: all 0.3s ease;
        color: white;
        border: none;
        min-width: 180px;
    }

    .payment-methods-actions button:hover {
        transform: translateY(-2px);
        box-shadow: 0 4px 8px rgba(0,0,0,0.1);
    }

    .payment-methods-actions .btn-info {
        background-color: #17a2b8;
        border-color: #17a2b8;
    }

    .payment-methods-actions .btn-info:hover {
        background-color: #138496;
    }

    .payment-methods-actions .btn-success {
        background-color: #28a745;
        border-color: #28a745;
    }

    .payment-methods-actions .btn-success:hover {
        background-color: #218838;
    }

    .payment-methods-actions .btn-danger {
        background-color: #dc3545;
        border-color: #dc3545;
    }

    .payment-methods-actions .btn-danger:hover {
        background-color: #c82333;
    }

    .payment-methods-actions .btn-warning {
        background-color: #ffc107;
        border-color: #ffc107;
        color: #000;
    }

    .payment-methods-actions .btn-warning:hover {
        background-color: #e0a800;
    }
</style> 