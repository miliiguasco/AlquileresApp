@page "/Perfil/{userId:int}"
@rendermode InteractiveServer
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.Authorization
@using System.Security.Claims
@using AlquileresApp.Core.Entidades
@using AlquileresApp.Core.Interfaces
@using AlquileresApp.Core.CasosDeUso.Tarjeta
@using AlquileresApp.Core.CasosDeUso.Reserva
@using AlquileresApp.UI.Components
@using AlquileresApp.Core.Enumerativos
@using AlquileresApp.Data
@inject CasoDeUsoListarMisReservas casoDeUsoListarMisReservas
@inject CasoDeUsoCancelarReserva casoDeUsoCancelarReserva
@inject AuthenticationStateProvider ServicioAutenticacion
@inject IUsuarioRepositorio UsuarioRepositorio
@inject ILogger<Perfil> Logger
@inject NavigationManager NavigationManager
@inject CasoDeUsoVisualizarTarjeta CUVisualizarTarjeta
@inject CasoDeUsoEliminarTarjeta CUEliminarTarjeta
@inject CasoDeUsoVisualizarReserva CUVisualizarReserva
@inject IJSRuntime JS
@attribute [Authorize]

<PageTitle>Mi Perfil</PageTitle>

<div class="profile-container">
    @if (usuario != null)
    {
        <div class="profile-header">
            <h1>Mi Perfil</h1>
        </div>

        @if (esAdministrador)
        {
            <div class="profile-section">
                @if (modoEdicion)
                {
                    <h2>Editar Información Personal</h2>
                    <DatosFormEdicion Input="@datosForm" 
                                  OnSubmit="GuardarCambios"
                                  FormName="editarPerfil"
                                  SubmitButtonText="Guardar"
                                  ButtonClass="btn"
                                  CancelarEdicion="CancelarEdicion" />          
                }
                else
                {
                    <h2>Información Personal</h2>
                    <div class="info-group">
                        <label>Nombre:</label>
                        <span>@usuario.Nombre</span>
                    </div>
                    <div class="info-group">
                        <label>Apellido:</label>
                        <span>@usuario.Apellido</span>
                    </div>
                    <div class="info-group">
                        <label>Email:</label>
                        <span>@usuario.Email</span>
                    </div>
                    <div class="info-group">
                        <label>Teléfono:</label>
                        <span>@usuario.Telefono</span>
                    </div>
                    <div class="info-group">
                        <label>Fecha de Nacimiento:</label>
                        <span>@(usuario.FechaNacimiento?.ToShortDateString() ?? "No especificada")</span>
                    </div>
                    <div class="profile-actions">   
                        @if (!string.IsNullOrEmpty(mensajeExito))
                        {
                            <div class="mensaje-exito">@mensajeExito</div>
                        }   
                        <button type="button" class="btn" @onclick="IniciarEdicion">
                            <i class="fas fa-edit"></i> Editar Perfil
                        </button>
                    </div>
                }
            </div>
        }
        else
        {
            <div class="tabs-container">
                <div class="tabs">
                    <button class="tab-button @(tabActiva == "datos" ? "active" : "")" 
                            @onclick="@(() => CambiarTab("datos"))">
                        <i class="fas fa-user"></i> Datos Personales
                    </button>
                    <button class="tab-button @(tabActiva == "pagos" ? "active" : "")" 
                            @onclick="@(() => CambiarTab("pagos"))">
                        <i class="fas fa-credit-card"></i> Método de Pago
                    </button>
                    <button class="tab-button @(tabActiva == "reservas" ? "active" : "")" 
                            @onclick="@(() => CambiarTab("reservas"))">
                        <i class="fas fa-calendar-alt"></i> Reservas
                    </button>
                </div>
            </div>

            <div class="tab-content">
                    @if (tabActiva == "datos")
                    {
                        <div class="tab-pane active">
                            <div class="profile-section">
                                @if (modoEdicion)
                                {
                                    <h2>Editar Información Personal</h2>
                                    <DatosFormEdicion Input="@datosForm" 
                                                  OnSubmit="GuardarCambios"
                                                  FormName="editarPerfil"
                                                  SubmitButtonText="Guardar"
                                                  ButtonClass="btn"
                                                  CancelarEdicion="CancelarEdicion" />          
                                }
                                else
                                {
                                    <h3>Información Personal</h3>
                                    <div class="info-group">
                                        <label>Nombre</label>
                                        <span>@usuario.Nombre</span>
                                    </div>
                                    <div class="info-group">
                                        <label>Apellido</label>
                                        <span>@usuario.Apellido</span>
                                    </div>
                                    <div class="info-group">
                                        <label>Email</label>
                                        <span>@usuario.Email</span>
                                    </div>
                                    <div class="info-group">
                                        <label>Teléfono</label>
                                        <span>@usuario.Telefono</span>
                                    </div>
                                    <div class="info-group">
                                        <label>Fecha de Nacimiento</label>
                                        <span>@(usuario.FechaNacimiento?.ToShortDateString() ?? "No especificada")</span>
                                    </div>
                                    <div class="profile-actions">
                                        @if (!string.IsNullOrEmpty(mensajeExito))
                                        {
                                            <div class="mensaje-exito">@mensajeExito</div>
                                        }   
                                        <button type="button" class="btn" @onclick="IniciarEdicion">
                                            <i class="fas fa-edit"></i> Editar Perfil
                                        </button>
                                    </div>
                                }
                            </div>
                        </div>
                    }
                    else if (tabActiva == "pagos")
                    {
                        <div class="tab-pane active" style="display: block;">
                            <div class="profile-section">
                                <h3>Métodos de Pago</h3>
                                <VisualizarTarjeta/>
                                <div class="">   
                                    @if (!TieneTarjeta())
                                    {
                                    <button type="button" class="boton boton-modificar" @onclick="IrARegistrarTarjeta">
                                        <i class="fas fa-plus-circle"></i> Registrar Nueva Tarjeta
                                    </button>
                                    }
                                </div>
                            </div>
                        </div>
                    }
                    else if (tabActiva == "reservas")
                    {
                        <div class="tab-pane active" style="display: block;">
                            <div class="profile-section">
                                 <h2 class="h2 mb-4">Mis Reservas</h2>

    @if (!string.IsNullOrEmpty(mensajeExito_misReservas))
    {
        <div class="alert alert-success">@mensajeExito_misReservas</div>
    }
    @if (!string.IsNullOrEmpty(mensajeError))
    {
        <div class="alert alert-danger">@mensajeError</div>
    }

    @if (!reservas.Any())
    {
        <div class="alert alert-info">No se encontraron reservas registradas.</div>
    }
    else
    {
        <table class="table_misreservas table-hover table-bordered shadow-sm">
            <thead class="table-dark">
                <tr>
                    <th>Propiedad</th>
                    <th>Politica De Cancelacion</th>
                    <th>Fecha inicio</th>
                    <th>Fecha fin</th>
                    <th>Estado</th>
                    <th>Total</th>
                    <th>Acciones</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var reserva in reservas)
                {
                    <tr>
                        <td>@reserva.Propiedad?.Titulo</td>
                       <td>@ObtenerDescripcionPolitica(reserva.Propiedad.PoliticaCancelacion)</td>
                        <td>@reserva.FechaInicio.ToShortDateString()</td>
                        <td>@reserva.FechaFin.ToShortDateString()</td>
                        <td>
                            <span class="badge bg-@GetBadgeColor(reserva.Estado)">
                                @reserva.Estado
                            </span>
                        </td>
                        <td>$@reserva.PrecioTotal.ToString("N2")</td>
                        <td>
                            @if (reserva.Estado == EstadoReserva.Pendiente)
                            {
                                <button class=" boton boton-modificar " @onclick="@(() => ModificarReserva(reserva.Id))">
                                    <i class="bi bi-pencil  "></i> 
                                </button>
                                <button class="boton boton-cancelar" @onclick="@(() => CancelarReserva(reserva.Id))">
                                    <i class="bi bi-x-circle "></i> 
                                </button>
                            }
                            else
                            {
                                <span class="text-muted">Sin acciones</span>
                            }
                        </td>
                    </tr>
                }
            </tbody>
        </table>  
    }
</div>

@if (mostrarConfirmacion)
{
    <div class="modal fade show d-block" tabindex="-1" style="background-color: rgba(0,0,0,0.5);">
        <div class="modal-dialog">
    using System.Configuration;
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Confirmar Cancelación</h5>
                    <button type="button" class="btn-close" aria-label="Cerrar" @onclick="CancelarConfirmacion"></button>
                </div>
                <div class="modal-body">
                    <p>¿Estás seguro de que querés cancelar esta reserva?</p>
                </div>
                <div class="modal-footer">
                    <button class="btn-otro btn-secondary" @onclick="CancelarConfirmacion">No</button>
                    <button class="btn-otro btn-danger" @onclick="ConfirmarCancelacion">Sí, Cancelar</button>
                </div>
            </div>
        </div>
    </div>
}
                                
                            </div>
                    }
                </div>
        }
    }
    else
    {
        <div class="alert alert-info">
            @if (_error != null)
            {
                <p>Error: @_error</p>
            }
            else
            {
                <p>Cargando información del perfil...</p>
            }
        </div>
    }
</div>


@code {

    [Parameter]
    public int? userId { get; set; }

    private Usuario? usuario;
    private string? _error;
    private bool modoEdicion = false;
    private string? mensajeExito;
    private bool esAdministrador = false;
    private string tabActiva = "datos";
    private bool mostrarEliminarTarjeta = false;
    private Tarjeta tarjeta;
    private int tarjetaSeleccionada = 0;
    private DatosFormEdicion.InputModel datosForm = new();
    private List<Reserva>? reservas=new();
    private bool mostrarConfirmacion = false;
    private int reservaAEliminarId;
    private string mensajeError ;
    private string mensajeExito_misReservas;



    protected override async Task OnInitializedAsync()
    {
        try
        {
            await CargarmisReservas();
            var authState = await ServicioAutenticacion.GetAuthenticationStateAsync();
            var user = authState.User;

            if (user.Identity?.IsAuthenticated != true)
            {
                NavigationManager.NavigateTo("/login");
                return;
            }

            var userEmail = user.FindFirst(ClaimTypes.Email)?.Value;
            if (string.IsNullOrEmpty(userEmail))
            {
                NavigationManager.NavigateTo("/login");
                return;
            }

            usuario = UsuarioRepositorio.ObtenerUsuarioPorEmail(userEmail);
            if (usuario == null)
            {
                _error = "No se pudo cargar la información del usuario.";
                return;
            }

            // Si se proporcionó un userId en la URL, verificar que coincida con el usuario actual
            if (userId.HasValue && userId.Value != usuario.Id)
            {
                NavigationManager.NavigateTo($"/Perfil/{usuario.Id}");
                return;
            }

            esAdministrador = user.IsInRole("Administrador");
            await CargarTarjeta();
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error al cargar el perfil del usuario");
            _error = "Ocurrió un error al cargar el perfil.";
        }
    }

    private async Task CambiarTab(string tab)
    {
        tabActiva = tab;
        if (modoEdicion)
        {
            CancelarEdicion();
        }
        
        if (tab == "reservas")
        {
            await CargarmisReservas();
        }
    }

    private void IniciarEdicion()
    {
        datosForm = new DatosFormEdicion.InputModel
        {
            Nombre = usuario!.Nombre,
            Apellido = usuario.Apellido,
            Email = usuario.Email,
            Telefono = usuario.Telefono,
            FechaDeNacimiento = usuario.FechaNacimiento
        };
        modoEdicion = true;
    }

    private void CancelarEdicion()
    {
        modoEdicion = false;
        datosForm = new();
    }

    private async Task GuardarCambios()
    {
        try
        {
            usuario!.Nombre = datosForm.Nombre;
            usuario.Apellido = datosForm.Apellido;
            usuario.Email = datosForm.Email;
            usuario.Telefono = datosForm.Telefono;
            usuario.FechaNacimiento = datosForm.FechaDeNacimiento;

            await Task.Run(() => UsuarioRepositorio.ModificarUsuario(usuario));
            
            modoEdicion = false;
            mensajeExito = "Perfil actualizado exitosamente";
            StateHasChanged();
        }
        catch (Exception ex)
        {
            _error = $"Error al actualizar el perfil: {ex.Message}";
        }
    }
    private  async Task CargarTarjeta(){
        var authState = await ServicioAutenticacion.GetAuthenticationStateAsync();
    var user = authState.User;

    if (user.Identity != null && user.Identity.IsAuthenticated)
    {
        var userId = user.FindFirst(c => c.Type == "sub")?.Value 
                  ?? user.FindFirst(c => c.Type == "userid")?.Value 
                  ?? user.FindFirst(System.Security.Claims.ClaimTypes.NameIdentifier)?.Value;

        if (!string.IsNullOrEmpty(userId) && int.TryParse(userId, out int id))
        {
            tarjeta = CUVisualizarTarjeta.Ejecutar(id);
        }
        else
        {
            mensajeError = "No se pudo obtener el ID del usuario.";
        }
    }
    else
    {
        mensajeError = "Usuario no autenticado.";
    }
    
    }
    

    private void CancelarEliminacion()
    {
        mostrarEliminarTarjeta = false;
        tarjeta = null;
        tarjetaSeleccionada = 0;
    }

    private bool TieneTarjeta()
    {
        return  UsuarioRepositorio.tieneTarjeta(usuario);
    }

    private async Task ConfirmarEliminacion()
    {
        if (tarjetaSeleccionada == 0)
        {
            await JS.InvokeVoidAsync("alert", "Por favor, seleccione una tarjeta para eliminar.");
            return;
        }

        var confirmacion = await JS.InvokeAsync<bool>("confirm", "¿Estás seguro de que deseas eliminar esta tarjeta?");
        if (confirmacion)
        {
            try
            {
                await CUEliminarTarjeta.Ejecutar(tarjetaSeleccionada);
                await JS.InvokeVoidAsync("alert", "Tarjeta eliminada exitosamente");
                CancelarEliminacion();
            }
            catch (Exception ex)
            {
                await JS.InvokeVoidAsync("alert", $"Error al eliminar la tarjeta: {ex.Message}");
            }
        }
    }

    private void IrARegistrarTarjeta()
    {
        NavigationManager.NavigateTo("/registrar-tarjeta");
    }


    private string ObtenerClaseEstado(string estado)
    {
        return estado.ToLower() switch
        {
            "pendiente" => "bg-warning",
            "confirmada" => "bg-success",
            "cancelada" => "bg-danger",
            "activa" => "bg-info",
            "finalizada" => "bg-secondary",
            _ => "bg-secondary"
        };
    }
    private  async Task CargarmisReservas()
{
    var authState = await ServicioAutenticacion.GetAuthenticationStateAsync();
    var user = authState.User;

    if (user.Identity != null && user.Identity.IsAuthenticated)
    {
        var userId = user.FindFirst(c => c.Type == "sub")?.Value 
                  ?? user.FindFirst(c => c.Type == "userid")?.Value 
                  ?? user.FindFirst(System.Security.Claims.ClaimTypes.NameIdentifier)?.Value;

        if (!string.IsNullOrEmpty(userId) && int.TryParse(userId, out int id))
        {
            reservas = casoDeUsoListarMisReservas.Ejecutar(id);
        }
        else
        {
            mensajeError = "No se pudo obtener el ID del usuario.";
        }
    }
    else
    {
        mensajeError = "Usuario no autenticado.";
    }
    
}

    private string GetBadgeColor(EstadoReserva estado)
    {
        return estado switch
        {
            EstadoReserva.Pendiente => "warning",
            EstadoReserva.Confirmada => "success",
            EstadoReserva.Cancelada => "secondary",
            _ => "light"
        };
    }

    private void ModificarReserva(int id)
    {
        NavigationManager.NavigateTo($"/modificarreserva/{id}");
    }

    private void CancelarReserva(int id)
    {
        reservaAEliminarId = id;
        mostrarConfirmacion = true;
        mensajeError = null;
        mensajeExito = null;
    }

    private void ConfirmarCancelacion()
{
    try
    {
        var resultado = casoDeUsoCancelarReserva.Ejecutar(reservaAEliminarId);

        if (resultado.EsExitosa)
        {
            mensajeExito_misReservas = resultado.Mensaje;

            if (resultado.MontoReembolsado.HasValue)
            {
                mensajeExito_misReservas += $" Monto reembolsado: ${resultado.MontoReembolsado.Value:N2}.";
            }

            CargarmisReservas();
        }
        else
        {
            mensajeError = resultado.Mensaje;
        }
    }
    catch (Exception ex)
    {
        mensajeError = $"Ocurrió un error inesperado: {ex.Message}";
    }
    finally
    {
        mostrarConfirmacion = false;
    }
}


    private string ObtenerDescripcionPolitica(PoliticasDeCancelacion politica)
{
    return politica switch
    {
        PoliticasDeCancelacion.Anticipo20_72hs => "Se puede cancelar con 72 horas de anticipación. Se reembolsa el 20%.",
        PoliticasDeCancelacion.SinAnticipo_NoCancelable => "No se puede cancelar.",
        PoliticasDeCancelacion.PagoTotal_48hs_50 => "Se puede cancelar con 48 horas de anticipación. Se reembolsa el 50%.",
        _ => "Política desconocida"
    };
}

    private void CancelarConfirmacion()
    {
        mostrarConfirmacion = false;
    }
}
