@page "/editar-tarjeta"
@rendermode InteractiveServer
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.Authorization
@using System.Security.Claims
@using AlquileresApp.Core.Entidades
@using AlquileresApp.Core.Interfaces
@using AlquileresApp.Core.CasosDeUso.Tarjeta
@using AlquileresApp.UI.Components
@inject AuthenticationStateProvider ServicioAutenticacion
@inject IUsuarioRepositorio UsuarioRepositorio
@inject ILogger<EditarTarjeta> Logger
@inject NavigationManager NavigationManager
@inject CasoDeUsoModificarTarjeta CUModificarTarjeta
@inject CasoDeUsoVisualizarTarjeta CUVisualizarTarjeta
@inject IJSRuntime JS
@attribute [Authorize]

<PageTitle>Editar Tarjeta</PageTitle>

<div class="profile-container">
    @if (usuario != null)
    {
        <div class="profile-header">
            <h1>Editar Tarjeta</h1>
        </div>

        <div class="profile-content">
            @if (!mostrarFormularioEdicion)
            {
                <div class="profile-section">
                    <div class="btn-container">
                        <h2>Seleccionar Tarjeta a Editar</h2>
                        <button class="btn-outline" @onclick="CancelarEdicion">
                            <i class="fas fa-times"></i> 
                        </button>
                    </div>
                    @if (tarjetas != null && tarjetas.Any())
                    {
                        <div class="tarjetas-lista">
                            @foreach (var tarjeta in tarjetas)
                            {
                                <div class="tarjeta-item" @onclick="() => SeleccionarTarjeta(tarjeta)">
                                    <i class="fas fa-credit-card"></i>
                                    <div class="tarjeta-info">
                                        <span>**** **** **** @tarjeta.NumeroTarjeta.Substring(tarjeta.NumeroTarjeta.Length - 4)</span>
                                        <small>Titular: @tarjeta.Titular</small>
                                        <small>Vence: @tarjeta.FechaVencimiento</small>
                                    </div>
                                </div>
                            }
                        </div>
                    }
                    else
                    {
                        <div class="alert alert-info">
                            No tienes tarjetas registradas.
                        </div>
                    }
                </div>
            }
            else
            {
                <div class="profile-section">
                    <div class="btn-container">
                        <h2>Datos de la Tarjeta</h2>
                        <button class="btn-outline" @onclick="VolverALista">
                            <i class="fas fa-arrow-left"></i> 
                        </button>
                    </div>
                    <DatosFormEdicionTarjeta Input="@datosForm" 
                                        OnSubmit="GuardarCambios"
                                        FormName="editarTarjeta"
                                        SubmitButtonText="Guardar Cambios"
                                        ButtonClass="btn" />          
                </div>
            }
        </div>
    }
    else
    {
        <div class="alert alert-info">
            @if (_error != null)
            {
                <p>Error: @_error</p>
            }
            else
            {
                <p>Cargando información...</p>
            }
        </div>
    }
</div>

@if (erroresValidacion.Any())
{
    <div class="alert alert-danger mt-3">
        <div class="d-flex align-items-center">
            <i class="fas fa-exclamation-triangle me-2"></i>
            <h4 class="alert-heading mb-0">Errores de validación:</h4>
        </div>
        <ul class="mt-2 mb-0">
            @foreach (var error in erroresValidacion)
            {
                <li>@error</li>
            }
        </ul>
    </div>
}

@if (!string.IsNullOrEmpty(mensajeExito))
{
    <div class="alert alert-success alert-dismissible fade show mt-4" role="alert">
        <div class="d-flex align-items-center">
            <i class="fas fa-check-circle me-2"></i>
            <div>
                <h4 class="alert-heading">¡Operación Exitosa!</h4>
                <p>@mensajeExito</p>
            </div>
        </div>
        <div class="mt-3">
            <button class="btn btn-primary" @onclick="VolverAPerfil">
                <i class="fas fa-arrow-left"></i> Volver al Perfil
            </button>
        </div>
    </div>
}

@code {
    private Usuario? usuario;
    private string? _error;
    private DatosFormEdicionTarjeta.InputModel datosForm = new();
    private string? mensajeExito;
    private List<Tarjeta>? tarjetas;
    private bool mostrarFormularioEdicion = false;
    private Tarjeta? tarjetaSeleccionada;
    private List<string> erroresValidacion = new();

    protected override async Task OnInitializedAsync()
    {
        try
        {
            var authState = await ServicioAutenticacion.GetAuthenticationStateAsync();
            var email = authState.User.FindFirst(ClaimTypes.Email)?.Value;
            
            if (email != null)
            {
                usuario = UsuarioRepositorio.ObtenerUsuarioPorEmail(email);
                if (usuario == null)
                {
                    _error = $"No se encontró usuario con email: {email}";
                    Logger.LogWarning(_error);
                }
                else
                {
                    tarjetas = CUVisualizarTarjeta.Ejecutar(usuario.Id);
                }
            }
            else
            {
                _error = "No se pudo obtener el email del usuario autenticado";
                Logger.LogWarning(_error);
            }
        }
        catch (Exception ex)
        {
            _error = $"Error al cargar la información: {ex.Message}";
            Logger.LogError(_error);
        }
    }

    private void SeleccionarTarjeta(Tarjeta tarjeta)
    {
        tarjetaSeleccionada = tarjeta;
        var numeroLimpio = new string(tarjeta.NumeroTarjeta.Where(char.IsDigit).ToArray());
        var numeroFormateado = "";
        for (int i = 0; i < numeroLimpio.Length; i++)
        {
            if (i > 0 && i % 4 == 0)
                numeroFormateado += " ";
            numeroFormateado += numeroLimpio[i];
        }
        datosForm.NumeroTarjeta = numeroFormateado;
        datosForm.Titular = tarjeta.Titular;
        datosForm.FechaVencimiento = tarjeta.FechaVencimiento;
        datosForm.CVV = tarjeta.CVV;
        mostrarFormularioEdicion = true;
    }

    private void VolverALista()
    {
        mostrarFormularioEdicion = false;
        tarjetaSeleccionada = null;
    }

    private void CancelarEdicion()
    {
        NavigationManager.NavigateTo("/Perfil");
    }

    private async Task GuardarCambios()
    {
        try
        {
            erroresValidacion.Clear();
            
            if (tarjetaSeleccionada == null)
            {
                erroresValidacion.Add("No se ha seleccionado ninguna tarjeta para editar");
                StateHasChanged();
                return;
            }

            // Validar número de tarjeta
            if (string.IsNullOrWhiteSpace(datosForm.NumeroTarjeta) || 
                datosForm.NumeroTarjeta.Replace(" ", "").Length != 16)
            {
                erroresValidacion.Add("El número de tarjeta debe tener 16 dígitos");
            }

            // Validar titular
            if (string.IsNullOrWhiteSpace(datosForm.Titular))
            {
                erroresValidacion.Add("El nombre del titular es requerido");
            }

            // Validar fecha de vencimiento
            if (string.IsNullOrWhiteSpace(datosForm.FechaVencimiento) || 
                !datosForm.FechaVencimiento.Contains("/") || 
                datosForm.FechaVencimiento.Length != 5)
            {
                erroresValidacion.Add("La fecha de vencimiento debe tener el formato MM/AA");
            }
            else
            {
                var partes = datosForm.FechaVencimiento.Split('/');
                if (partes.Length != 2 || 
                    !int.TryParse(partes[0], out int mes) || 
                    !int.TryParse(partes[1], out int año) ||
                    mes < 1 || mes > 12)
                {
                    erroresValidacion.Add("La fecha de vencimiento debe tener el formato MM/AA válido");
                }
                else
                {
                    var fechaActual = DateTime.Now;
                    var añoActual = fechaActual.Year % 100;
                    var mesActual = fechaActual.Month;

                    // Convertir a año completo para comparación más precisa
                    var añoCompleto = 2000 + año; // Asumimos que las tarjetas no son de antes del 2000
                    var añoActualCompleto = fechaActual.Year;

                    if (añoCompleto < añoActualCompleto || 
                        (añoCompleto == añoActualCompleto && mes < mesActual))
                    {
                        erroresValidacion.Add("La tarjeta está vencida. Por favor, ingrese una fecha de vencimiento válida.");
                        Logger.LogWarning($"Intento de guardar tarjeta vencida. Fecha ingresada: {mes}/{año}");
                    }
                }
            }

            // Validar CVV
            if (string.IsNullOrWhiteSpace(datosForm.CVV) || 
                datosForm.CVV.Length != 3 || 
                !datosForm.CVV.All(char.IsDigit))
            {
                erroresValidacion.Add("El CVV debe tener 3 dígitos");
            }

            if (erroresValidacion.Any())
            {
                StateHasChanged();
                return;
            }

            await CUModificarTarjeta.Ejecutar(
                tarjetaSeleccionada.Id,
                datosForm.NumeroTarjeta.Replace(" ", ""),
                datosForm.Titular,
                datosForm.FechaVencimiento,
                datosForm.CVV
            );
            
            mensajeExito = "La tarjeta ha sido actualizada exitosamente";
            StateHasChanged();
        }
        catch (Exception ex)
        {
            _error = $"Error al actualizar la tarjeta: {ex.Message}";
            Logger.LogError(_error);
            await JS.InvokeVoidAsync("alert", _error);
        }
    }

    private void VolverAPerfil()
    {
        NavigationManager.NavigateTo("/Perfil");
    }
}

<style>
    .profile-container {
        max-width: 800px;
        margin: 2rem auto;
        padding: 2rem;
        background: white;
        border-radius: 15px;
        box-shadow: 0 4px 20px rgba(0, 0, 0, 0.1);
    }

    .profile-header {
        margin-bottom: 2rem;
        text-align: center;
    }

    .profile-header h1 {
        color: #333;
        font-size: 2rem;
        margin: 0;
    }

    .profile-content {
        display: flex;
        flex-direction: column;
        gap: 2rem;
    }

    .profile-section {
        background: #f8f9fa;
        padding: 2rem;
        border-radius: 10px;
    }

    .btn-container {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 1.5rem;
    }

    .btn-container h2 {
        margin: 0;
        color: #333;
        font-size: 1.5rem;
    }

    .btn-outline {
        background: none;
        border: 1px solid #dc3545;
        color: #dc3545;
        padding: 0.5rem 1rem;
        border-radius: 5px;
        cursor: pointer;
        transition: all 0.3s ease;
    }

    .btn-outline:hover {
        background: #dc3545;
        color: white;
    }

    .btn {
        background-color: #007bff;
        color: white;
        border: none;
        padding: 0.75rem 1.5rem;
        border-radius: 5px;
        cursor: pointer;
        font-weight: 500;
        transition: background-color 0.3s ease;
    }

    .btn:hover {
        background-color: #0056b3;
    }

    .tarjetas-lista {
        display: flex;
        flex-direction: column;
        gap: 1rem;
    }

    .tarjeta-item {
        display: flex;
        align-items: center;
        gap: 1rem;
        padding: 1rem;
        background: white;
        border-radius: 8px;
        cursor: pointer;
        transition: all 0.3s ease;
        border: 1px solid #dee2e6;
    }

    .tarjeta-item:hover {
        transform: translateY(-2px);
        box-shadow: 0 2px 8px rgba(0,0,0,0.1);
    }

    .tarjeta-item i {
        font-size: 1.5rem;
        color: #0d6efd;
    }

    .tarjeta-info {
        display: flex;
        flex-direction: column;
        gap: 0.25rem;
    }

    .tarjeta-info span {
        font-weight: 500;
    }

    .tarjeta-info small {
        color: #6c757d;
    }

    .alert-success {
        background-color: #d4edda;
        border-color: #c3e6cb;
        color: #155724;
        padding: 1rem;
        border-radius: 0.375rem;
        margin-top: 1rem;
    }

    .alert-success i {
        font-size: 1.5rem;
        color: #28a745;
    }

    .alert-heading {
        margin-bottom: 0.5rem;
        font-size: 1.25rem;
    }

    .alert-danger {
        background-color: #f8d7da;
        border-color: #f5c6cb;
        color: #721c24;
        padding: 1rem;
        border-radius: 0.375rem;
        margin-top: 1rem;
        position: fixed;
        top: 20px;
        right: 20px;
        z-index: 1000;
        min-width: 300px;
        box-shadow: 0 2px 5px rgba(0,0,0,0.2);
    }

    .alert-danger i {
        font-size: 1.5rem;
        color: #dc3545;
    }

    .alert-danger ul {
        padding-left: 1.5rem;
        margin-bottom: 0;
    }

    .alert-danger li {
        margin-bottom: 0.5rem;
    }

    .alert-danger li:last-child {
        margin-bottom: 0;
    }
</style> 