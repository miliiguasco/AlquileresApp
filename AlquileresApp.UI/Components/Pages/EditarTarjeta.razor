@page "/editar-tarjeta"
@rendermode InteractiveServer
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.Authorization
@using System.Security.Claims
@using AlquileresApp.Core.Entidades
@using AlquileresApp.Core.Interfaces
@using AlquileresApp.Core.CasosDeUso.Tarjeta
@using AlquileresApp.UI.Components
@inject AuthenticationStateProvider ServicioAutenticacion
@inject IUsuarioRepositorio UsuarioRepositorio
@inject ILogger<EditarTarjeta> Logger
@inject NavigationManager NavigationManager
@inject CasoDeUsoModificarTarjeta CUModificarTarjeta
@inject CasoDeUsoVisualizarTarjeta CUVisualizarTarjeta
@attribute [Authorize]

<PageTitle>Editar Tarjeta</PageTitle>

<div class="profile-container">
    @if (usuario != null)
    {
        <div class="profile-header">
            <h1>Editar Tarjeta</h1>
        </div>

        <div class="profile-content">
            <div class="profile-section">
                <div class="btn-container">
                    <h2>Datos de la Tarjeta</h2>
                    <button class="btn-outline" @onclick="CancelarEdicion">
                        <i class="fas fa-times"></i> 
                    </button>
                </div>
                <DatosFormEdicionTarjeta Input="@datosForm" 
                                    OnSubmit="GuardarCambios"
                                    FormName="editarTarjeta"
                                    SubmitButtonText="Guardar Cambios"
                                    ButtonClass="btn" />          
            </div>
        </div>
    }
    else
    {
        <div class="alert alert-info">
            @if (_error != null)
            {
                <p>Error: @_error</p>
            }
            else
            {
                <p>Cargando información...</p>
            }
        </div>
    }
</div>

@if (!string.IsNullOrEmpty(mensajeExito))
{
    <div class="alert alert-success alert-dismissible fade show mt-4" role="alert">
        @mensajeExito
        <div class="mt-3">
            <button class="btn btn-primary" @onclick="VolverAPerfil">
                <i class="fas fa-arrow-left"></i> Volver al Perfil
            </button>
        </div>
    </div>
}

@code {
    private Usuario? usuario;
    private string? _error;
    private DatosFormEdicionTarjeta.InputModel datosForm = new();
    private string? mensajeExito;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            var authState = await ServicioAutenticacion.GetAuthenticationStateAsync();
            var email = authState.User.FindFirst(ClaimTypes.Email)?.Value;
            
            if (email != null)
            {
                usuario = UsuarioRepositorio.ObtenerUsuarioPorEmail(email);
                if (usuario == null)
                {
                    _error = $"No se encontró usuario con email: {email}";
                    Logger.LogWarning(_error);
                }
                else
                {
                    var tarjetas = CUVisualizarTarjeta.Ejecutar(usuario.Id);
                    if (tarjetas != null && tarjetas.Any())
                    {
                        var tarjeta = tarjetas.First();
                        var numeroLimpio = new string(tarjeta.NumeroTarjeta.Where(char.IsDigit).ToArray());
                        var numeroFormateado = "";
                        for (int i = 0; i < numeroLimpio.Length; i++)
                        {
                            if (i > 0 && i % 4 == 0)
                                numeroFormateado += " ";
                            numeroFormateado += numeroLimpio[i];
                        }
                        datosForm.NumeroTarjeta = numeroFormateado;
                        datosForm.Titular = tarjeta.Titular;
                        datosForm.FechaVencimiento = tarjeta.FechaVencimiento;
                        datosForm.CVV = tarjeta.CVV;
                    }
                    else
                    {
                        _error = "No se encontró ninguna tarjeta para este usuario";
                        Logger.LogWarning(_error);
                    }
                }
            }
            else
            {
                _error = "No se pudo obtener el email del usuario autenticado";
                Logger.LogWarning(_error);
            }
        }
        catch (Exception ex)
        {
            _error = $"Error al cargar la información: {ex.Message}";
            Logger.LogError(_error);
        }
    }

    private void CancelarEdicion()
    {
        NavigationManager.NavigateTo("/Perfil");
    }

    private async Task GuardarCambios()
    {
        try
        {
            var tarjetas = CUVisualizarTarjeta.Ejecutar(usuario!.Id);
            if (tarjetas == null || !tarjetas.Any())
            {
                throw new Exception("No se encontró ninguna tarjeta para este usuario");
            }

            var tarjeta = tarjetas.First();
            await CUModificarTarjeta.Ejecutar(
                tarjeta.Id,
                datosForm.NumeroTarjeta.Replace(" ", ""),
                datosForm.Titular,
                datosForm.FechaVencimiento,
                datosForm.CVV
            );
            
            mensajeExito = "Tarjeta actualizada exitosamente";
            StateHasChanged();
        }
        catch (Exception ex)
        {
            _error = $"Error al actualizar la tarjeta: {ex.Message}";
            Logger.LogError(_error);
        }
    }

    private void VolverAPerfil()
    {
        NavigationManager.NavigateTo("/Perfil");
    }
}

<style>
    .profile-container {
        max-width: 800px;
        margin: 2rem auto;
        padding: 2rem;
        background: white;
        border-radius: 15px;
        box-shadow: 0 4px 20px rgba(0, 0, 0, 0.1);
    }

    .profile-header {
        margin-bottom: 2rem;
        text-align: center;
    }

    .profile-header h1 {
        color: #333;
        font-size: 2rem;
        margin: 0;
    }

    .profile-content {
        display: flex;
        flex-direction: column;
        gap: 2rem;
    }

    .profile-section {
        background: #f8f9fa;
        padding: 2rem;
        border-radius: 10px;
    }

    .btn-container {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 1.5rem;
    }

    .btn-container h2 {
        margin: 0;
        color: #333;
        font-size: 1.5rem;
    }

    .btn-outline {
        background: none;
        border: 1px solid #dc3545;
        color: #dc3545;
        padding: 0.5rem 1rem;
        border-radius: 5px;
        cursor: pointer;
        transition: all 0.3s ease;
    }

    .btn-outline:hover {
        background: #dc3545;
        color: white;
    }

    .btn {
        background-color: #007bff;
        color: white;
        border: none;
        padding: 0.75rem 1.5rem;
        border-radius: 5px;
        cursor: pointer;
        font-weight: 500;
        transition: background-color 0.3s ease;
    }

    .btn:hover {
        background-color: #0056b3;
    }
</style> 