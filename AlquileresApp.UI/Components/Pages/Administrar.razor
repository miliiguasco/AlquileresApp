@page "/Administrar"
@rendermode InteractiveServer
@using Microsoft.AspNetCore.Authorization
@using AlquileresApp.Core.Entidades
@using AlquileresApp.Core.CasosDeUso.Propiedad
@using AlquileresApp.Core.CasosDeUso.Reserva
@using AlquileresApp.Core.CasosDeUso.Promocion
@using AlquileresApp.Core.Enumerativos
@using AlquileresApp.Core.Interfaces

@inject CasoDeUsoListarPropiedades CUListarPropiedades
@inject CasoDeUsoEliminarPropiedad CUEliminarPropiedad
@inject CasoDeUsoModificarPropiedad CUModificarPropiedad
@inject CasoDeUsoListarPromociones CUListarPromociones
@inject CasoDeUsoCrearPromocion CUCrearPromocion
@inject CasoDeUsoEliminarPromocion CUEliminarPromocion
@inject CasoDeUsoModificarPromocion CUModificarPromocion
@inject IJSRuntime JS

@attribute [Authorize(Roles = "Administrador")] 

<PageTitle>Administración</PageTitle>

<HeadContent>
    <link href="css/Administracion.css" rel="stylesheet" />
</HeadContent>

<div class="admin-container">
    <h1 class="admin-title">Panel de Administración</h1>

    <div class="tabs-container">
        <div class="tabs">
            <button class="tab-button @(tabActiva == "reservas" ? "active" : "")" 
                    @onclick='@(() => CambiarTab("reservas"))'>
                Reservas
            </button>
            <button class="tab-button @(tabActiva == "encargados" ? "active" : "")" 
                    @onclick='@(() => CambiarTab("encargados"))'>
                Encargados
            </button>
            <button class="tab-button @(tabActiva == "propiedades" ? "active" : "")" 
                    @onclick='@(() => CambiarTab("propiedades"))'>
                Propiedades
            </button>
            <button class="tab-button @(tabActiva == "promociones" ? "active" : "")" 
                    @onclick='@(() => CambiarTab("promociones"))'>
                Promociones
            </button>
        </div>

        <div class="tab-content">
            @if (tabActiva == "reservas")
            {
                <div class="tab-pane active">
                    <ListaReservasadm />
                </div>
            }
            else if (tabActiva == "encargados")
            {
                <div class="tab-pane">
                    <h3>Gestión de Encargados</h3>
                    <!-- Contenido de encargados -->
                </div>
            }
            else if (tabActiva == "propiedades")
            {
                <div class="tab-pane active">
                    <Propiedades />
                </div>
            }
            else if (tabActiva == "promociones")
            {
                <div class="tab-pane active">
                    <ListaPromociones
                        Promociones="promociones"
                        OnCrear="CrearPromocion"
                        OnEditar="EditarPromocion"
                        OnEliminar="EliminarPromocion" />
                </div>
            }
        </div>
    </div>
</div>

@code {
    private string tabActiva = "reservas";
    private List<Propiedad>? propiedades;
    private List<Promocion>? promociones;

    protected override async Task OnInitializedAsync()
    {
        await CargarPropiedades();
        await CargarPromociones();
    }

    private async Task CambiarTab(string tab)
    {
        tabActiva = tab;
        await InvokeAsync(StateHasChanged);
    }

    private Task CargarPropiedades()
    {
        propiedades = CUListarPropiedades.Ejecutar();
        StateHasChanged();
        return Task.CompletedTask;
    }

    private Task CargarPromociones()
    {
        promociones = CUListarPromociones.Ejecutar();
        StateHasChanged();
        return Task.CompletedTask;
    }

    private async Task CrearPromocion(Promocion promocion)
    {
        CUCrearPromocion.Ejecutar(promocion);
        await CargarPromociones();
    }

    private async Task EditarPromocion(Promocion promocion)
    {
        CUModificarPromocion.Ejecutar(promocion);
        await CargarPromociones();
    }

    private async Task EliminarPromocion(Promocion promocion)
    {
        CUEliminarPromocion.Ejecutar(promocion.Id);
        await CargarPromociones();
    }

    private async Task EditarPropiedad(Propiedad propiedad)
    {
        CUModificarPropiedad.Ejecutar(propiedad);
        await CargarPropiedades();
    }

    private async Task EliminarPropiedad(Propiedad propiedad)
    {
        CUEliminarPropiedad.Ejecutar(propiedad);
        await CargarPropiedades();
    }
}
